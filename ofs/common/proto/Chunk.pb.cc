// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chunk.proto

#include "Chunk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BlockStatus_Chunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IpAddress_Chunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeInfo_Chunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Neighbor_Chunk_2eproto;
namespace ofs {
namespace c2m {
class IpAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IpAddress> _instance;
} _IpAddress_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeInfo> _instance;
} _NodeInfo_default_instance_;
class RegisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Register> _instance;
} _Register_default_instance_;
class NeighborDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Neighbor> _instance;
} _Neighbor_default_instance_;
class NeighborNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NeighborNotify> _instance;
} _NeighborNotify_default_instance_;
class BlockStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockStatus> _instance;
} _BlockStatus_default_instance_;
class HeartbeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Heartbeat> _instance;
} _Heartbeat_default_instance_;
class UpdataBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdataBlock> _instance;
} _UpdataBlock_default_instance_;
class ReportBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportBlock> _instance;
} _ReportBlock_default_instance_;
class RecoverBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecoverBlock> _instance;
} _RecoverBlock_default_instance_;
class CleanBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CleanBlock> _instance;
} _CleanBlock_default_instance_;
class CleanCompleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CleanComplete> _instance;
} _CleanComplete_default_instance_;
class NeighborGossipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NeighborGossip> _instance;
} _NeighborGossip_default_instance_;
class WriteNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteNotify> _instance;
} _WriteNotify_default_instance_;
class AppendNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendNotify> _instance;
} _AppendNotify_default_instance_;
class ResizeBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResizeBlock> _instance;
} _ResizeBlock_default_instance_;
class RecoverBlockDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecoverBlockData> _instance;
} _RecoverBlockData_default_instance_;
class RecoverBlockCompleteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecoverBlockComplete> _instance;
} _RecoverBlockComplete_default_instance_;
}  // namespace c2m
}  // namespace ofs
static void InitDefaultsIpAddress_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_IpAddress_default_instance_;
    new (ptr) ::ofs::c2m::IpAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::IpAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IpAddress_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIpAddress_Chunk_2eproto}, {}};

static void InitDefaultsNodeInfo_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_NodeInfo_default_instance_;
    new (ptr) ::ofs::c2m::NodeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::NodeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeInfo_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeInfo_Chunk_2eproto}, {}};

static void InitDefaultsRegister_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_Register_default_instance_;
    new (ptr) ::ofs::c2m::Register();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::Register::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Register_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRegister_Chunk_2eproto}, {
      &scc_info_IpAddress_Chunk_2eproto.base,
      &scc_info_NodeInfo_Chunk_2eproto.base,}};

static void InitDefaultsNeighbor_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_Neighbor_default_instance_;
    new (ptr) ::ofs::c2m::Neighbor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::Neighbor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Neighbor_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNeighbor_Chunk_2eproto}, {
      &scc_info_IpAddress_Chunk_2eproto.base,}};

static void InitDefaultsNeighborNotify_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_NeighborNotify_default_instance_;
    new (ptr) ::ofs::c2m::NeighborNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::NeighborNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NeighborNotify_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNeighborNotify_Chunk_2eproto}, {
      &scc_info_Neighbor_Chunk_2eproto.base,}};

static void InitDefaultsBlockStatus_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_BlockStatus_default_instance_;
    new (ptr) ::ofs::c2m::BlockStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::BlockStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BlockStatus_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBlockStatus_Chunk_2eproto}, {}};

static void InitDefaultsHeartbeat_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_Heartbeat_default_instance_;
    new (ptr) ::ofs::c2m::Heartbeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::Heartbeat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Heartbeat_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeartbeat_Chunk_2eproto}, {
      &scc_info_NodeInfo_Chunk_2eproto.base,}};

static void InitDefaultsUpdataBlock_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_UpdataBlock_default_instance_;
    new (ptr) ::ofs::c2m::UpdataBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::UpdataBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UpdataBlock_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUpdataBlock_Chunk_2eproto}, {
      &scc_info_BlockStatus_Chunk_2eproto.base,}};

static void InitDefaultsReportBlock_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_ReportBlock_default_instance_;
    new (ptr) ::ofs::c2m::ReportBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::ReportBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReportBlock_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReportBlock_Chunk_2eproto}, {
      &scc_info_BlockStatus_Chunk_2eproto.base,}};

static void InitDefaultsRecoverBlock_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_RecoverBlock_default_instance_;
    new (ptr) ::ofs::c2m::RecoverBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::RecoverBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RecoverBlock_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRecoverBlock_Chunk_2eproto}, {}};

static void InitDefaultsCleanBlock_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_CleanBlock_default_instance_;
    new (ptr) ::ofs::c2m::CleanBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::CleanBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CleanBlock_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCleanBlock_Chunk_2eproto}, {}};

static void InitDefaultsCleanComplete_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_CleanComplete_default_instance_;
    new (ptr) ::ofs::c2m::CleanComplete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::CleanComplete::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CleanComplete_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCleanComplete_Chunk_2eproto}, {}};

static void InitDefaultsNeighborGossip_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_NeighborGossip_default_instance_;
    new (ptr) ::ofs::c2m::NeighborGossip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::NeighborGossip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NeighborGossip_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNeighborGossip_Chunk_2eproto}, {
      &scc_info_Neighbor_Chunk_2eproto.base,}};

static void InitDefaultsWriteNotify_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_WriteNotify_default_instance_;
    new (ptr) ::ofs::c2m::WriteNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::WriteNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteNotify_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteNotify_Chunk_2eproto}, {}};

static void InitDefaultsAppendNotify_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_AppendNotify_default_instance_;
    new (ptr) ::ofs::c2m::AppendNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::AppendNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AppendNotify_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAppendNotify_Chunk_2eproto}, {}};

static void InitDefaultsResizeBlock_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_ResizeBlock_default_instance_;
    new (ptr) ::ofs::c2m::ResizeBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::ResizeBlock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResizeBlock_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResizeBlock_Chunk_2eproto}, {}};

static void InitDefaultsRecoverBlockData_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_RecoverBlockData_default_instance_;
    new (ptr) ::ofs::c2m::RecoverBlockData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::RecoverBlockData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RecoverBlockData_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRecoverBlockData_Chunk_2eproto}, {}};

static void InitDefaultsRecoverBlockComplete_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_RecoverBlockComplete_default_instance_;
    new (ptr) ::ofs::c2m::RecoverBlockComplete();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::RecoverBlockComplete::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RecoverBlockComplete_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRecoverBlockComplete_Chunk_2eproto}, {}};

void InitDefaults_Chunk_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_IpAddress_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeInfo_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Register_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Neighbor_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NeighborNotify_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlockStatus_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Heartbeat_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpdataBlock_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportBlock_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecoverBlock_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CleanBlock_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CleanComplete_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NeighborGossip_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteNotify_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendNotify_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResizeBlock_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecoverBlockData_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecoverBlockComplete_Chunk_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_Chunk_2eproto[18];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_Chunk_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_Chunk_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_Chunk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::IpAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::IpAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::IpAddress, host_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::IpAddress, port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, cpu_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, rss_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, vss_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, disk_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, fault_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Register, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Register, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Register, outpost_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Register, harbor_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Register, rack_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Register, dc_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Register, node_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Register, extend_),
  4,
  1,
  2,
  5,
  6,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Neighbor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Neighbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Neighbor, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Neighbor, harbor_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NeighborNotify, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NeighborNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NeighborNotify, neighbor_),
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::BlockStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::BlockStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::BlockStatus, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::BlockStatus, version_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::BlockStatus, size_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::BlockStatus, fault_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Heartbeat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Heartbeat, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Heartbeat, node_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::UpdataBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::UpdataBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::UpdataBlock, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::UpdataBlock, block_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ReportBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ReportBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ReportBlock, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ReportBlock, blocks_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlock, blockid_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlock, version_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlock, lease_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlock, copyto_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::CleanBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::CleanBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::CleanBlock, blockid_),
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::CleanComplete, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::CleanComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::CleanComplete, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::CleanComplete, blockid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NeighborGossip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NeighborGossip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NeighborGossip, neighbor_),
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, blockid_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, version_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, newversion_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, offset_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, data_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::AppendNotify, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::AppendNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::AppendNotify, blockid_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::AppendNotify, version_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::AppendNotify, newversion_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::AppendNotify, data_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ResizeBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ResizeBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ResizeBlock, blockid_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ResizeBlock, version_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ResizeBlock, size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlockData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlockData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlockData, blockid_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlockData, version_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlockData, offset_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlockData, data_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlockComplete, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlockComplete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlockComplete, blockid_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverBlockComplete, version_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ofs::c2m::IpAddress)},
  { 9, 19, sizeof(::ofs::c2m::NodeInfo)},
  { 24, 36, sizeof(::ofs::c2m::Register)},
  { 43, 50, sizeof(::ofs::c2m::Neighbor)},
  { 52, 58, sizeof(::ofs::c2m::NeighborNotify)},
  { 59, 68, sizeof(::ofs::c2m::BlockStatus)},
  { 72, 79, sizeof(::ofs::c2m::Heartbeat)},
  { 81, 88, sizeof(::ofs::c2m::UpdataBlock)},
  { 90, 97, sizeof(::ofs::c2m::ReportBlock)},
  { 99, 108, sizeof(::ofs::c2m::RecoverBlock)},
  { 112, 118, sizeof(::ofs::c2m::CleanBlock)},
  { 119, 126, sizeof(::ofs::c2m::CleanComplete)},
  { 128, 134, sizeof(::ofs::c2m::NeighborGossip)},
  { 135, 145, sizeof(::ofs::c2m::WriteNotify)},
  { 150, 159, sizeof(::ofs::c2m::AppendNotify)},
  { 163, 171, sizeof(::ofs::c2m::ResizeBlock)},
  { 174, 183, sizeof(::ofs::c2m::RecoverBlockData)},
  { 187, 194, sizeof(::ofs::c2m::RecoverBlockComplete)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_IpAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_NodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_Register_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_Neighbor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_NeighborNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_BlockStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_Heartbeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_UpdataBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_ReportBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_RecoverBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_CleanBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_CleanComplete_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_NeighborGossip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_WriteNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_AppendNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_ResizeBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_RecoverBlockData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_RecoverBlockComplete_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Chunk_2eproto = {
  {}, AddDescriptors_Chunk_2eproto, "Chunk.proto", schemas,
  file_default_instances, TableStruct_Chunk_2eproto::offsets,
  file_level_metadata_Chunk_2eproto, 18, file_level_enum_descriptors_Chunk_2eproto, file_level_service_descriptors_Chunk_2eproto,
};

const char descriptor_table_protodef_Chunk_2eproto[] =
  "\n\013Chunk.proto\022\007ofs.c2m\"\'\n\tIpAddress\022\014\n\004h"
  "ost\030\001 \002(\t\022\014\n\004port\030\002 \002(\005\"N\n\010NodeInfo\022\013\n\003c"
  "pu\030\001 \002(\005\022\013\n\003rss\030\002 \002(\005\022\013\n\003vss\030\003 \002(\005\022\014\n\004di"
  "sk\030\004 \002(\005\022\r\n\005fault\030\005 \002(\010\"\252\001\n\010Register\022\n\n\002"
  "id\030\001 \002(\005\022#\n\007outpost\030\002 \002(\0132\022.ofs.c2m.IpAd"
  "dress\022\"\n\006harbor\030\003 \002(\0132\022.ofs.c2m.IpAddres"
  "s\022\014\n\004rack\030\004 \002(\005\022\n\n\002dc\030\005 \002(\005\022\037\n\004node\030\006 \002("
  "\0132\021.ofs.c2m.NodeInfo\022\016\n\006extend\030\007 \002(\t\":\n\010"
  "Neighbor\022\n\n\002id\030\001 \002(\005\022\"\n\006harbor\030\002 \002(\0132\022.o"
  "fs.c2m.IpAddress\"5\n\016NeighborNotify\022#\n\010ne"
  "ighbor\030\001 \002(\0132\021.ofs.c2m.Neighbor\"G\n\013Block"
  "Status\022\n\n\002id\030\001 \002(\003\022\017\n\007version\030\002 \002(\003\022\014\n\004s"
  "ize\030\003 \002(\005\022\r\n\005fault\030\004 \002(\010\"8\n\tHeartbeat\022\n\n"
  "\002id\030\001 \002(\005\022\037\n\004node\030\002 \002(\0132\021.ofs.c2m.NodeIn"
  "fo\">\n\013UpdataBlock\022\n\n\002id\030\001 \002(\005\022#\n\005block\030\002"
  " \002(\0132\024.ofs.c2m.BlockStatus\"\?\n\013ReportBloc"
  "k\022\n\n\002id\030\001 \002(\005\022$\n\006blocks\030\002 \003(\0132\024.ofs.c2m."
  "BlockStatus\"O\n\014RecoverBlock\022\017\n\007blockid\030\001"
  " \002(\003\022\017\n\007version\030\002 \002(\003\022\r\n\005lease\030\003 \002(\003\022\016\n\006"
  "copyTo\030\004 \003(\005\"\035\n\nCleanBlock\022\017\n\007blockid\030\001 "
  "\002(\003\",\n\rCleanComplete\022\n\n\002id\030\001 \002(\005\022\017\n\007bloc"
  "kid\030\002 \002(\003\"5\n\016NeighborGossip\022#\n\010neighbor\030"
  "\001 \002(\0132\021.ofs.c2m.Neighbor\"a\n\013WriteNotify\022"
  "\017\n\007blockid\030\001 \002(\003\022\017\n\007version\030\002 \002(\003\022\022\n\nnew"
  "version\030\003 \002(\003\022\016\n\006offset\030\004 \002(\005\022\014\n\004data\030\005 "
  "\002(\t\"R\n\014AppendNotify\022\017\n\007blockid\030\001 \002(\003\022\017\n\007"
  "version\030\002 \002(\003\022\022\n\nnewversion\030\003 \002(\003\022\014\n\004dat"
  "a\030\004 \002(\t\"=\n\013ResizeBlock\022\017\n\007blockid\030\001 \002(\003\022"
  "\017\n\007version\030\002 \002(\003\022\014\n\004size\030\003 \002(\005\"R\n\020Recove"
  "rBlockData\022\017\n\007blockid\030\001 \002(\003\022\017\n\007version\030\002"
  " \002(\003\022\016\n\006offset\030\003 \002(\005\022\014\n\004data\030\004 \002(\014\"8\n\024Re"
  "coverBlockComplete\022\017\n\007blockid\030\001 \002(\003\022\017\n\007v"
  "ersion\030\002 \002(\003"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_Chunk_2eproto = {
  false, InitDefaults_Chunk_2eproto, 
  descriptor_table_protodef_Chunk_2eproto,
  "Chunk.proto", &assign_descriptors_table_Chunk_2eproto, 1292,
};

void AddDescriptors_Chunk_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Chunk_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Chunk_2eproto = []() { AddDescriptors_Chunk_2eproto(); return true; }();
namespace ofs {
namespace c2m {

// ===================================================================

void IpAddress::InitAsDefaultInstance() {
}
class IpAddress::HasBitSetters {
 public:
  static void set_has_host(IpAddress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_port(IpAddress* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpAddress::kHostFieldNumber;
const int IpAddress::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpAddress::IpAddress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.IpAddress)
}
IpAddress::IpAddress(const IpAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.IpAddress)
}

void IpAddress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_IpAddress_Chunk_2eproto.base);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

IpAddress::~IpAddress() {
  // @@protoc_insertion_point(destructor:ofs.c2m.IpAddress)
  SharedDtor();
}

void IpAddress::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IpAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpAddress& IpAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IpAddress_Chunk_2eproto.base);
  return *internal_default_instance();
}


void IpAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    host_.ClearNonDefaultToEmptyNoArena();
  }
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IpAddress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IpAddress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string host = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ofs.c2m.IpAddress.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required int32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IpAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.IpAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ofs.c2m.IpAddress.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.IpAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.IpAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IpAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.IpAddress.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.IpAddress)
}

::google::protobuf::uint8* IpAddress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.IpAddress.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.IpAddress)
  return target;
}

size_t IpAddress::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.IpAddress)
  size_t total_size = 0;

  if (has_host()) {
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  if (has_port()) {
    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t IpAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.IpAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());

    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.IpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const IpAddress* source =
      ::google::protobuf::DynamicCastToGenerated<IpAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.IpAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.IpAddress)
    MergeFrom(*source);
  }
}

void IpAddress::MergeFrom(const IpAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.IpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.IpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpAddress::CopyFrom(const IpAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.IpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void IpAddress::Swap(IpAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpAddress::InternalSwap(IpAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::google::protobuf::Metadata IpAddress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
}
class NodeInfo::HasBitSetters {
 public:
  static void set_has_cpu(NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_rss(NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_vss(NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_disk(NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_fault(NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfo::kCpuFieldNumber;
const int NodeInfo::kRssFieldNumber;
const int NodeInfo::kVssFieldNumber;
const int NodeInfo::kDiskFieldNumber;
const int NodeInfo::kFaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfo::NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cpu_, &from.cpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&fault_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(fault_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ::memset(&cpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_) -
      reinterpret_cast<char*>(&cpu_)) + sizeof(fault_));
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:ofs.c2m.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
}

void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo& NodeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeInfo_Chunk_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fault_) -
        reinterpret_cast<char*>(&cpu_)) + sizeof(fault_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 cpu = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cpu(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 rss = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_rss(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 vss = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_vss(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 disk = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_disk(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool fault = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_fault(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.NodeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cpu = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_cpu(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rss = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_rss(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vss = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_vss(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 disk = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_disk(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool fault = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_fault(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.NodeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cpu(), output);
  }

  // required int32 rss = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rss(), output);
  }

  // required int32 vss = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vss(), output);
  }

  // required int32 disk = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->disk(), output);
  }

  // required bool fault = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fault(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.NodeInfo)
}

::google::protobuf::uint8* NodeInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cpu(), target);
  }

  // required int32 rss = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rss(), target);
  }

  // required int32 vss = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vss(), target);
  }

  // required int32 disk = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->disk(), target);
  }

  // required bool fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fault(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.NodeInfo)
  return target;
}

size_t NodeInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.NodeInfo)
  size_t total_size = 0;

  if (has_cpu()) {
    // required int32 cpu = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpu());
  }

  if (has_rss()) {
    // required int32 rss = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rss());
  }

  if (has_vss()) {
    // required int32 vss = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vss());
  }

  if (has_disk()) {
    // required int32 disk = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->disk());
  }

  if (has_fault()) {
    // required bool fault = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.NodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 cpu = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpu());

    // required int32 rss = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rss());

    // required int32 vss = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vss());

    // required int32 disk = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->disk());

    // required bool fault = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::google::protobuf::DynamicCastToGenerated<NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      cpu_ = from.cpu_;
    }
    if (cached_has_bits & 0x00000002u) {
      rss_ = from.rss_;
    }
    if (cached_has_bits & 0x00000004u) {
      vss_ = from.vss_;
    }
    if (cached_has_bits & 0x00000008u) {
      disk_ = from.disk_;
    }
    if (cached_has_bits & 0x00000010u) {
      fault_ = from.fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cpu_, other->cpu_);
  swap(rss_, other->rss_);
  swap(vss_, other->vss_);
  swap(disk_, other->disk_);
  swap(fault_, other->fault_);
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Register::InitAsDefaultInstance() {
  ::ofs::c2m::_Register_default_instance_._instance.get_mutable()->outpost_ = const_cast< ::ofs::c2m::IpAddress*>(
      ::ofs::c2m::IpAddress::internal_default_instance());
  ::ofs::c2m::_Register_default_instance_._instance.get_mutable()->harbor_ = const_cast< ::ofs::c2m::IpAddress*>(
      ::ofs::c2m::IpAddress::internal_default_instance());
  ::ofs::c2m::_Register_default_instance_._instance.get_mutable()->node_ = const_cast< ::ofs::c2m::NodeInfo*>(
      ::ofs::c2m::NodeInfo::internal_default_instance());
}
class Register::HasBitSetters {
 public:
  static void set_has_id(Register* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::ofs::c2m::IpAddress& outpost(const Register* msg);
  static void set_has_outpost(Register* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ofs::c2m::IpAddress& harbor(const Register* msg);
  static void set_has_harbor(Register* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_rack(Register* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_dc(Register* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::ofs::c2m::NodeInfo& node(const Register* msg);
  static void set_has_node(Register* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_extend(Register* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::IpAddress&
Register::HasBitSetters::outpost(const Register* msg) {
  return *msg->outpost_;
}
const ::ofs::c2m::IpAddress&
Register::HasBitSetters::harbor(const Register* msg) {
  return *msg->harbor_;
}
const ::ofs::c2m::NodeInfo&
Register::HasBitSetters::node(const Register* msg) {
  return *msg->node_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Register::kIdFieldNumber;
const int Register::kOutpostFieldNumber;
const int Register::kHarborFieldNumber;
const int Register::kRackFieldNumber;
const int Register::kDcFieldNumber;
const int Register::kNodeFieldNumber;
const int Register::kExtendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Register::Register()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.Register)
}
Register::Register(const Register& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extend()) {
    extend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_);
  }
  if (from.has_outpost()) {
    outpost_ = new ::ofs::c2m::IpAddress(*from.outpost_);
  } else {
    outpost_ = nullptr;
  }
  if (from.has_harbor()) {
    harbor_ = new ::ofs::c2m::IpAddress(*from.harbor_);
  } else {
    harbor_ = nullptr;
  }
  if (from.has_node()) {
    node_ = new ::ofs::c2m::NodeInfo(*from.node_);
  } else {
    node_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dc_) -
    reinterpret_cast<char*>(&id_)) + sizeof(dc_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.Register)
}

void Register::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Register_Chunk_2eproto.base);
  extend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&outpost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dc_) -
      reinterpret_cast<char*>(&outpost_)) + sizeof(dc_));
}

Register::~Register() {
  // @@protoc_insertion_point(destructor:ofs.c2m.Register)
  SharedDtor();
}

void Register::SharedDtor() {
  extend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete outpost_;
  if (this != internal_default_instance()) delete harbor_;
  if (this != internal_default_instance()) delete node_;
}

void Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Register& Register::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Register_Chunk_2eproto.base);
  return *internal_default_instance();
}


void Register::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.Register)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      extend_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(outpost_ != nullptr);
      outpost_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(harbor_ != nullptr);
      harbor_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(node_ != nullptr);
      node_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dc_) -
        reinterpret_cast<char*>(&id_)) + sizeof(dc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Register::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Register*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ofs.c2m.IpAddress outpost = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::IpAddress::_InternalParse;
        object = msg->mutable_outpost();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required .ofs.c2m.IpAddress harbor = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::IpAddress::_InternalParse;
        object = msg->mutable_harbor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required int32 rack = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_rack(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 dc = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_dc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ofs.c2m.NodeInfo node = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::NodeInfo::_InternalParse;
        object = msg->mutable_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required string extend = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ofs.c2m.Register.extend");
        object = msg->mutable_extend();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.Register)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.IpAddress outpost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outpost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.IpAddress harbor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_harbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rack = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_rack(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 dc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_dc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.NodeInfo node = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string extend = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extend().data(), static_cast<int>(this->extend().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ofs.c2m.Register.extend");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.Register)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.Register)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .ofs.c2m.IpAddress outpost = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::outpost(this), output);
  }

  // required .ofs.c2m.IpAddress harbor = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::harbor(this), output);
  }

  // required int32 rack = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rack(), output);
  }

  // required int32 dc = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dc(), output);
  }

  // required .ofs.c2m.NodeInfo node = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::node(this), output);
  }

  // required string extend = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extend().data(), static_cast<int>(this->extend().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.Register.extend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->extend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.Register)
}

::google::protobuf::uint8* Register::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.Register)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .ofs.c2m.IpAddress outpost = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::outpost(this), target);
  }

  // required .ofs.c2m.IpAddress harbor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::harbor(this), target);
  }

  // required int32 rack = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rack(), target);
  }

  // required int32 dc = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dc(), target);
  }

  // required .ofs.c2m.NodeInfo node = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::node(this), target);
  }

  // required string extend = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extend().data(), static_cast<int>(this->extend().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.Register.extend");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->extend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.Register)
  return target;
}

size_t Register::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.Register)
  size_t total_size = 0;

  if (has_extend()) {
    // required string extend = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extend());
  }

  if (has_outpost()) {
    // required .ofs.c2m.IpAddress outpost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *outpost_);
  }

  if (has_harbor()) {
    // required .ofs.c2m.IpAddress harbor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *harbor_);
  }

  if (has_node()) {
    // required .ofs.c2m.NodeInfo node = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_rack()) {
    // required int32 rack = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rack());
  }

  if (has_dc()) {
    // required int32 dc = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dc());
  }

  return total_size;
}
size_t Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.Register)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string extend = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extend());

    // required .ofs.c2m.IpAddress outpost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *outpost_);

    // required .ofs.c2m.IpAddress harbor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *harbor_);

    // required .ofs.c2m.NodeInfo node = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 rack = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rack());

    // required int32 dc = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Register::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.Register)
  GOOGLE_DCHECK_NE(&from, this);
  const Register* source =
      ::google::protobuf::DynamicCastToGenerated<Register>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.Register)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.Register)
    MergeFrom(*source);
  }
}

void Register::MergeFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.Register)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      extend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_outpost()->::ofs::c2m::IpAddress::MergeFrom(from.outpost());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_harbor()->::ofs::c2m::IpAddress::MergeFrom(from.harbor());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_node()->::ofs::c2m::NodeInfo::MergeFrom(from.node());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      rack_ = from.rack_;
    }
    if (cached_has_bits & 0x00000040u) {
      dc_ = from.dc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Register::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register::CopyFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_outpost()) {
    if (!this->outpost_->IsInitialized()) return false;
  }
  if (has_harbor()) {
    if (!this->harbor_->IsInitialized()) return false;
  }
  if (has_node()) {
    if (!this->node_->IsInitialized()) return false;
  }
  return true;
}

void Register::Swap(Register* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Register::InternalSwap(Register* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extend_.Swap(&other->extend_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(outpost_, other->outpost_);
  swap(harbor_, other->harbor_);
  swap(node_, other->node_);
  swap(id_, other->id_);
  swap(rack_, other->rack_);
  swap(dc_, other->dc_);
}

::google::protobuf::Metadata Register::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Neighbor::InitAsDefaultInstance() {
  ::ofs::c2m::_Neighbor_default_instance_._instance.get_mutable()->harbor_ = const_cast< ::ofs::c2m::IpAddress*>(
      ::ofs::c2m::IpAddress::internal_default_instance());
}
class Neighbor::HasBitSetters {
 public:
  static void set_has_id(Neighbor* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ofs::c2m::IpAddress& harbor(const Neighbor* msg);
  static void set_has_harbor(Neighbor* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::IpAddress&
Neighbor::HasBitSetters::harbor(const Neighbor* msg) {
  return *msg->harbor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Neighbor::kIdFieldNumber;
const int Neighbor::kHarborFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Neighbor::Neighbor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.Neighbor)
}
Neighbor::Neighbor(const Neighbor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_harbor()) {
    harbor_ = new ::ofs::c2m::IpAddress(*from.harbor_);
  } else {
    harbor_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.Neighbor)
}

void Neighbor::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Neighbor_Chunk_2eproto.base);
  ::memset(&harbor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&harbor_)) + sizeof(id_));
}

Neighbor::~Neighbor() {
  // @@protoc_insertion_point(destructor:ofs.c2m.Neighbor)
  SharedDtor();
}

void Neighbor::SharedDtor() {
  if (this != internal_default_instance()) delete harbor_;
}

void Neighbor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Neighbor& Neighbor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Neighbor_Chunk_2eproto.base);
  return *internal_default_instance();
}


void Neighbor::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.Neighbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(harbor_ != nullptr);
    harbor_->Clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Neighbor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Neighbor*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ofs.c2m.IpAddress harbor = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::IpAddress::_InternalParse;
        object = msg->mutable_harbor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Neighbor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.Neighbor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.IpAddress harbor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_harbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.Neighbor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.Neighbor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Neighbor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.Neighbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .ofs.c2m.IpAddress harbor = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::harbor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.Neighbor)
}

::google::protobuf::uint8* Neighbor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.Neighbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .ofs.c2m.IpAddress harbor = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::harbor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.Neighbor)
  return target;
}

size_t Neighbor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.Neighbor)
  size_t total_size = 0;

  if (has_harbor()) {
    // required .ofs.c2m.IpAddress harbor = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *harbor_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t Neighbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.Neighbor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ofs.c2m.IpAddress harbor = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *harbor_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Neighbor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.Neighbor)
  GOOGLE_DCHECK_NE(&from, this);
  const Neighbor* source =
      ::google::protobuf::DynamicCastToGenerated<Neighbor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.Neighbor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.Neighbor)
    MergeFrom(*source);
  }
}

void Neighbor::MergeFrom(const Neighbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.Neighbor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_harbor()->::ofs::c2m::IpAddress::MergeFrom(from.harbor());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Neighbor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.Neighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Neighbor::CopyFrom(const Neighbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.Neighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neighbor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_harbor()) {
    if (!this->harbor_->IsInitialized()) return false;
  }
  return true;
}

void Neighbor::Swap(Neighbor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Neighbor::InternalSwap(Neighbor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(harbor_, other->harbor_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata Neighbor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NeighborNotify::InitAsDefaultInstance() {
  ::ofs::c2m::_NeighborNotify_default_instance_._instance.get_mutable()->neighbor_ = const_cast< ::ofs::c2m::Neighbor*>(
      ::ofs::c2m::Neighbor::internal_default_instance());
}
class NeighborNotify::HasBitSetters {
 public:
  static const ::ofs::c2m::Neighbor& neighbor(const NeighborNotify* msg);
  static void set_has_neighbor(NeighborNotify* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::Neighbor&
NeighborNotify::HasBitSetters::neighbor(const NeighborNotify* msg) {
  return *msg->neighbor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeighborNotify::kNeighborFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeighborNotify::NeighborNotify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.NeighborNotify)
}
NeighborNotify::NeighborNotify(const NeighborNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_neighbor()) {
    neighbor_ = new ::ofs::c2m::Neighbor(*from.neighbor_);
  } else {
    neighbor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.NeighborNotify)
}

void NeighborNotify::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NeighborNotify_Chunk_2eproto.base);
  neighbor_ = nullptr;
}

NeighborNotify::~NeighborNotify() {
  // @@protoc_insertion_point(destructor:ofs.c2m.NeighborNotify)
  SharedDtor();
}

void NeighborNotify::SharedDtor() {
  if (this != internal_default_instance()) delete neighbor_;
}

void NeighborNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NeighborNotify& NeighborNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NeighborNotify_Chunk_2eproto.base);
  return *internal_default_instance();
}


void NeighborNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.NeighborNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(neighbor_ != nullptr);
    neighbor_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NeighborNotify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NeighborNotify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .ofs.c2m.Neighbor neighbor = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::Neighbor::_InternalParse;
        object = msg->mutable_neighbor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NeighborNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.NeighborNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ofs.c2m.Neighbor neighbor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.NeighborNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.NeighborNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NeighborNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.NeighborNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ofs.c2m.Neighbor neighbor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::neighbor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.NeighborNotify)
}

::google::protobuf::uint8* NeighborNotify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.NeighborNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ofs.c2m.Neighbor neighbor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::neighbor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.NeighborNotify)
  return target;
}

size_t NeighborNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.NeighborNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ofs.c2m.Neighbor neighbor = 1;
  if (has_neighbor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *neighbor_);
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NeighborNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.NeighborNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const NeighborNotify* source =
      ::google::protobuf::DynamicCastToGenerated<NeighborNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.NeighborNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.NeighborNotify)
    MergeFrom(*source);
  }
}

void NeighborNotify::MergeFrom(const NeighborNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.NeighborNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_neighbor()) {
    mutable_neighbor()->::ofs::c2m::Neighbor::MergeFrom(from.neighbor());
  }
}

void NeighborNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.NeighborNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeighborNotify::CopyFrom(const NeighborNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.NeighborNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighborNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_neighbor()) {
    if (!this->neighbor_->IsInitialized()) return false;
  }
  return true;
}

void NeighborNotify::Swap(NeighborNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeighborNotify::InternalSwap(NeighborNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(neighbor_, other->neighbor_);
}

::google::protobuf::Metadata NeighborNotify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BlockStatus::InitAsDefaultInstance() {
}
class BlockStatus::HasBitSetters {
 public:
  static void set_has_id(BlockStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_version(BlockStatus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_size(BlockStatus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_fault(BlockStatus* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockStatus::kIdFieldNumber;
const int BlockStatus::kVersionFieldNumber;
const int BlockStatus::kSizeFieldNumber;
const int BlockStatus::kFaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockStatus::BlockStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.BlockStatus)
}
BlockStatus::BlockStatus(const BlockStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fault_) -
    reinterpret_cast<char*>(&id_)) + sizeof(fault_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.BlockStatus)
}

void BlockStatus::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_) -
      reinterpret_cast<char*>(&id_)) + sizeof(fault_));
}

BlockStatus::~BlockStatus() {
  // @@protoc_insertion_point(destructor:ofs.c2m.BlockStatus)
  SharedDtor();
}

void BlockStatus::SharedDtor() {
}

void BlockStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockStatus& BlockStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BlockStatus_Chunk_2eproto.base);
  return *internal_default_instance();
}


void BlockStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.BlockStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fault_) -
        reinterpret_cast<char*>(&id_)) + sizeof(fault_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlockStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BlockStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool fault = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_fault(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlockStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.BlockStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool fault = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_fault(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.BlockStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.BlockStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlockStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.BlockStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // required int32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // required bool fault = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fault(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.BlockStatus)
}

::google::protobuf::uint8* BlockStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.BlockStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // required int32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // required bool fault = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fault(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.BlockStatus)
  return target;
}

size_t BlockStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.BlockStatus)
  size_t total_size = 0;

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_version()) {
    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_size()) {
    // required int32 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  if (has_fault()) {
    // required bool fault = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t BlockStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.BlockStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int32 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());

    // required bool fault = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.BlockStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockStatus* source =
      ::google::protobuf::DynamicCastToGenerated<BlockStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.BlockStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.BlockStatus)
    MergeFrom(*source);
  }
}

void BlockStatus::MergeFrom(const BlockStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.BlockStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      fault_ = from.fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlockStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.BlockStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockStatus::CopyFrom(const BlockStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.BlockStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void BlockStatus::Swap(BlockStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockStatus::InternalSwap(BlockStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(version_, other->version_);
  swap(size_, other->size_);
  swap(fault_, other->fault_);
}

::google::protobuf::Metadata BlockStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Heartbeat::InitAsDefaultInstance() {
  ::ofs::c2m::_Heartbeat_default_instance_._instance.get_mutable()->node_ = const_cast< ::ofs::c2m::NodeInfo*>(
      ::ofs::c2m::NodeInfo::internal_default_instance());
}
class Heartbeat::HasBitSetters {
 public:
  static void set_has_id(Heartbeat* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ofs::c2m::NodeInfo& node(const Heartbeat* msg);
  static void set_has_node(Heartbeat* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::NodeInfo&
Heartbeat::HasBitSetters::node(const Heartbeat* msg) {
  return *msg->node_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heartbeat::kIdFieldNumber;
const int Heartbeat::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heartbeat::Heartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node()) {
    node_ = new ::ofs::c2m::NodeInfo(*from.node_);
  } else {
    node_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.Heartbeat)
}

void Heartbeat::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Heartbeat_Chunk_2eproto.base);
  ::memset(&node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&node_)) + sizeof(id_));
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:ofs.c2m.Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
  if (this != internal_default_instance()) delete node_;
}

void Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Heartbeat& Heartbeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Heartbeat_Chunk_2eproto.base);
  return *internal_default_instance();
}


void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(node_ != nullptr);
    node_->Clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Heartbeat::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Heartbeat*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ofs.c2m.NodeInfo node = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::NodeInfo::_InternalParse;
        object = msg->mutable_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.Heartbeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.NodeInfo node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.Heartbeat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .ofs.c2m.NodeInfo node = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::node(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.Heartbeat)
}

::google::protobuf::uint8* Heartbeat::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .ofs.c2m.NodeInfo node = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::node(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.Heartbeat)
  return target;
}

size_t Heartbeat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.Heartbeat)
  size_t total_size = 0;

  if (has_node()) {
    // required .ofs.c2m.NodeInfo node = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.Heartbeat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ofs.c2m.NodeInfo node = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartbeat* source =
      ::google::protobuf::DynamicCastToGenerated<Heartbeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.Heartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.Heartbeat)
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_node()->::ofs::c2m::NodeInfo::MergeFrom(from.node());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_node()) {
    if (!this->node_->IsInitialized()) return false;
  }
  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(node_, other->node_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UpdataBlock::InitAsDefaultInstance() {
  ::ofs::c2m::_UpdataBlock_default_instance_._instance.get_mutable()->block_ = const_cast< ::ofs::c2m::BlockStatus*>(
      ::ofs::c2m::BlockStatus::internal_default_instance());
}
class UpdataBlock::HasBitSetters {
 public:
  static void set_has_id(UpdataBlock* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ofs::c2m::BlockStatus& block(const UpdataBlock* msg);
  static void set_has_block(UpdataBlock* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::BlockStatus&
UpdataBlock::HasBitSetters::block(const UpdataBlock* msg) {
  return *msg->block_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdataBlock::kIdFieldNumber;
const int UpdataBlock::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdataBlock::UpdataBlock()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.UpdataBlock)
}
UpdataBlock::UpdataBlock(const UpdataBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block()) {
    block_ = new ::ofs::c2m::BlockStatus(*from.block_);
  } else {
    block_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.UpdataBlock)
}

void UpdataBlock::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UpdataBlock_Chunk_2eproto.base);
  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&block_)) + sizeof(id_));
}

UpdataBlock::~UpdataBlock() {
  // @@protoc_insertion_point(destructor:ofs.c2m.UpdataBlock)
  SharedDtor();
}

void UpdataBlock::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void UpdataBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdataBlock& UpdataBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UpdataBlock_Chunk_2eproto.base);
  return *internal_default_instance();
}


void UpdataBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.UpdataBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_ != nullptr);
    block_->Clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdataBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UpdataBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ofs.c2m.BlockStatus block = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::BlockStatus::_InternalParse;
        object = msg->mutable_block();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdataBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.UpdataBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.BlockStatus block = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.UpdataBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.UpdataBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdataBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.UpdataBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .ofs.c2m.BlockStatus block = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::block(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.UpdataBlock)
}

::google::protobuf::uint8* UpdataBlock::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.UpdataBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .ofs.c2m.BlockStatus block = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::block(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.UpdataBlock)
  return target;
}

size_t UpdataBlock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.UpdataBlock)
  size_t total_size = 0;

  if (has_block()) {
    // required .ofs.c2m.BlockStatus block = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t UpdataBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.UpdataBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ofs.c2m.BlockStatus block = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *block_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdataBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.UpdataBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdataBlock* source =
      ::google::protobuf::DynamicCastToGenerated<UpdataBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.UpdataBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.UpdataBlock)
    MergeFrom(*source);
  }
}

void UpdataBlock::MergeFrom(const UpdataBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.UpdataBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_block()->::ofs::c2m::BlockStatus::MergeFrom(from.block());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdataBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.UpdataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdataBlock::CopyFrom(const UpdataBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.UpdataBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdataBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_block()) {
    if (!this->block_->IsInitialized()) return false;
  }
  return true;
}

void UpdataBlock::Swap(UpdataBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdataBlock::InternalSwap(UpdataBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block_, other->block_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata UpdataBlock::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReportBlock::InitAsDefaultInstance() {
}
class ReportBlock::HasBitSetters {
 public:
  static void set_has_id(ReportBlock* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportBlock::kIdFieldNumber;
const int ReportBlock::kBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportBlock::ReportBlock()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.ReportBlock)
}
ReportBlock::ReportBlock(const ReportBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.ReportBlock)
}

void ReportBlock::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReportBlock_Chunk_2eproto.base);
  id_ = 0;
}

ReportBlock::~ReportBlock() {
  // @@protoc_insertion_point(destructor:ofs.c2m.ReportBlock)
  SharedDtor();
}

void ReportBlock::SharedDtor() {
}

void ReportBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportBlock& ReportBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportBlock_Chunk_2eproto.base);
  return *internal_default_instance();
}


void ReportBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.ReportBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .ofs.c2m.BlockStatus blocks = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::ofs::c2m::BlockStatus::_InternalParse;
          object = msg->add_blocks();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.ReportBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ofs.c2m.BlockStatus blocks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.ReportBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.ReportBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.ReportBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .ofs.c2m.BlockStatus blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->blocks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.ReportBlock)
}

::google::protobuf::uint8* ReportBlock::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.ReportBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .ofs.c2m.BlockStatus blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->blocks(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.ReportBlock)
  return target;
}

size_t ReportBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.ReportBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ofs.c2m.BlockStatus blocks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->blocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->blocks(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.ReportBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportBlock* source =
      ::google::protobuf::DynamicCastToGenerated<ReportBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.ReportBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.ReportBlock)
    MergeFrom(*source);
  }
}

void ReportBlock::MergeFrom(const ReportBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.ReportBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void ReportBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.ReportBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportBlock::CopyFrom(const ReportBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.ReportBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->blocks())) return false;
  return true;
}

void ReportBlock::Swap(ReportBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportBlock::InternalSwap(ReportBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&blocks_)->InternalSwap(CastToBase(&other->blocks_));
  swap(id_, other->id_);
}

::google::protobuf::Metadata ReportBlock::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecoverBlock::InitAsDefaultInstance() {
}
class RecoverBlock::HasBitSetters {
 public:
  static void set_has_blockid(RecoverBlock* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_version(RecoverBlock* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_lease(RecoverBlock* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecoverBlock::kBlockidFieldNumber;
const int RecoverBlock::kVersionFieldNumber;
const int RecoverBlock::kLeaseFieldNumber;
const int RecoverBlock::kCopyToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoverBlock::RecoverBlock()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.RecoverBlock)
}
RecoverBlock::RecoverBlock(const RecoverBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      copyto_(from.copyto_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blockid_, &from.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lease_) -
    reinterpret_cast<char*>(&blockid_)) + sizeof(lease_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.RecoverBlock)
}

void RecoverBlock::SharedCtor() {
  ::memset(&blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&blockid_)) + sizeof(lease_));
}

RecoverBlock::~RecoverBlock() {
  // @@protoc_insertion_point(destructor:ofs.c2m.RecoverBlock)
  SharedDtor();
}

void RecoverBlock::SharedDtor() {
}

void RecoverBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecoverBlock& RecoverBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecoverBlock_Chunk_2eproto.base);
  return *internal_default_instance();
}


void RecoverBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.RecoverBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  copyto_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&blockid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lease_) -
        reinterpret_cast<char*>(&blockid_)) + sizeof(lease_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecoverBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecoverBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_blockid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 lease = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_lease(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 copyTo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_copyto(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_copyto();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecoverBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.RecoverBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_blockid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 lease = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_lease(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lease_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 copyTo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_copyto())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_copyto())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.RecoverBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.RecoverBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecoverBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.RecoverBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->blockid(), output);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // required int64 lease = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lease(), output);
  }

  // repeated int32 copyTo = 4;
  for (int i = 0, n = this->copyto_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->copyto(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.RecoverBlock)
}

::google::protobuf::uint8* RecoverBlock::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.RecoverBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->blockid(), target);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // required int64 lease = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lease(), target);
  }

  // repeated int32 copyTo = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->copyto_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.RecoverBlock)
  return target;
}

size_t RecoverBlock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.RecoverBlock)
  size_t total_size = 0;

  if (has_blockid()) {
    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());
  }

  if (has_version()) {
    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_lease()) {
    // required int64 lease = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lease());
  }

  return total_size;
}
size_t RecoverBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.RecoverBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());

    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int64 lease = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->lease());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 copyTo = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->copyto_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->copyto_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoverBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.RecoverBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoverBlock* source =
      ::google::protobuf::DynamicCastToGenerated<RecoverBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.RecoverBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.RecoverBlock)
    MergeFrom(*source);
  }
}

void RecoverBlock::MergeFrom(const RecoverBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.RecoverBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  copyto_.MergeFrom(from.copyto_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      blockid_ = from.blockid_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      lease_ = from.lease_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecoverBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.RecoverBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverBlock::CopyFrom(const RecoverBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.RecoverBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RecoverBlock::Swap(RecoverBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoverBlock::InternalSwap(RecoverBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  copyto_.InternalSwap(&other->copyto_);
  swap(blockid_, other->blockid_);
  swap(version_, other->version_);
  swap(lease_, other->lease_);
}

::google::protobuf::Metadata RecoverBlock::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CleanBlock::InitAsDefaultInstance() {
}
class CleanBlock::HasBitSetters {
 public:
  static void set_has_blockid(CleanBlock* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanBlock::kBlockidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanBlock::CleanBlock()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.CleanBlock)
}
CleanBlock::CleanBlock(const CleanBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blockid_ = from.blockid_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.CleanBlock)
}

void CleanBlock::SharedCtor() {
  blockid_ = PROTOBUF_LONGLONG(0);
}

CleanBlock::~CleanBlock() {
  // @@protoc_insertion_point(destructor:ofs.c2m.CleanBlock)
  SharedDtor();
}

void CleanBlock::SharedDtor() {
}

void CleanBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanBlock& CleanBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CleanBlock_Chunk_2eproto.base);
  return *internal_default_instance();
}


void CleanBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.CleanBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockid_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CleanBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_blockid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.CleanBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_blockid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.CleanBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.CleanBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.CleanBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->blockid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.CleanBlock)
}

::google::protobuf::uint8* CleanBlock::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.CleanBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->blockid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.CleanBlock)
  return target;
}

size_t CleanBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.CleanBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 blockid = 1;
  if (has_blockid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.CleanBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanBlock* source =
      ::google::protobuf::DynamicCastToGenerated<CleanBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.CleanBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.CleanBlock)
    MergeFrom(*source);
  }
}

void CleanBlock::MergeFrom(const CleanBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.CleanBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_blockid()) {
    set_blockid(from.blockid());
  }
}

void CleanBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.CleanBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanBlock::CopyFrom(const CleanBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.CleanBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CleanBlock::Swap(CleanBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanBlock::InternalSwap(CleanBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(blockid_, other->blockid_);
}

::google::protobuf::Metadata CleanBlock::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CleanComplete::InitAsDefaultInstance() {
}
class CleanComplete::HasBitSetters {
 public:
  static void set_has_id(CleanComplete* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_blockid(CleanComplete* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanComplete::kIdFieldNumber;
const int CleanComplete::kBlockidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanComplete::CleanComplete()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.CleanComplete)
}
CleanComplete::CleanComplete(const CleanComplete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blockid_, &from.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&blockid_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.CleanComplete)
}

void CleanComplete::SharedCtor() {
  ::memset(&blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&blockid_)) + sizeof(id_));
}

CleanComplete::~CleanComplete() {
  // @@protoc_insertion_point(destructor:ofs.c2m.CleanComplete)
  SharedDtor();
}

void CleanComplete::SharedDtor() {
}

void CleanComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanComplete& CleanComplete::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CleanComplete_Chunk_2eproto.base);
  return *internal_default_instance();
}


void CleanComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.CleanComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&blockid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&blockid_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CleanComplete::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CleanComplete*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 blockid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_blockid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CleanComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.CleanComplete)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 blockid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_blockid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.CleanComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.CleanComplete)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CleanComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.CleanComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 blockid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->blockid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.CleanComplete)
}

::google::protobuf::uint8* CleanComplete::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.CleanComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 blockid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->blockid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.CleanComplete)
  return target;
}

size_t CleanComplete::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.CleanComplete)
  size_t total_size = 0;

  if (has_blockid()) {
    // required int64 blockid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t CleanComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.CleanComplete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 blockid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanComplete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.CleanComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanComplete* source =
      ::google::protobuf::DynamicCastToGenerated<CleanComplete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.CleanComplete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.CleanComplete)
    MergeFrom(*source);
  }
}

void CleanComplete::MergeFrom(const CleanComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.CleanComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      blockid_ = from.blockid_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CleanComplete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.CleanComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanComplete::CopyFrom(const CleanComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.CleanComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CleanComplete::Swap(CleanComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CleanComplete::InternalSwap(CleanComplete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(blockid_, other->blockid_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata CleanComplete::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NeighborGossip::InitAsDefaultInstance() {
  ::ofs::c2m::_NeighborGossip_default_instance_._instance.get_mutable()->neighbor_ = const_cast< ::ofs::c2m::Neighbor*>(
      ::ofs::c2m::Neighbor::internal_default_instance());
}
class NeighborGossip::HasBitSetters {
 public:
  static const ::ofs::c2m::Neighbor& neighbor(const NeighborGossip* msg);
  static void set_has_neighbor(NeighborGossip* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::Neighbor&
NeighborGossip::HasBitSetters::neighbor(const NeighborGossip* msg) {
  return *msg->neighbor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeighborGossip::kNeighborFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeighborGossip::NeighborGossip()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.NeighborGossip)
}
NeighborGossip::NeighborGossip(const NeighborGossip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_neighbor()) {
    neighbor_ = new ::ofs::c2m::Neighbor(*from.neighbor_);
  } else {
    neighbor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.NeighborGossip)
}

void NeighborGossip::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NeighborGossip_Chunk_2eproto.base);
  neighbor_ = nullptr;
}

NeighborGossip::~NeighborGossip() {
  // @@protoc_insertion_point(destructor:ofs.c2m.NeighborGossip)
  SharedDtor();
}

void NeighborGossip::SharedDtor() {
  if (this != internal_default_instance()) delete neighbor_;
}

void NeighborGossip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NeighborGossip& NeighborGossip::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NeighborGossip_Chunk_2eproto.base);
  return *internal_default_instance();
}


void NeighborGossip::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.NeighborGossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(neighbor_ != nullptr);
    neighbor_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NeighborGossip::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NeighborGossip*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .ofs.c2m.Neighbor neighbor = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::Neighbor::_InternalParse;
        object = msg->mutable_neighbor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NeighborGossip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.NeighborGossip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ofs.c2m.Neighbor neighbor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.NeighborGossip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.NeighborGossip)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NeighborGossip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.NeighborGossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ofs.c2m.Neighbor neighbor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::neighbor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.NeighborGossip)
}

::google::protobuf::uint8* NeighborGossip::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.NeighborGossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ofs.c2m.Neighbor neighbor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::neighbor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.NeighborGossip)
  return target;
}

size_t NeighborGossip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.NeighborGossip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ofs.c2m.Neighbor neighbor = 1;
  if (has_neighbor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *neighbor_);
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NeighborGossip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.NeighborGossip)
  GOOGLE_DCHECK_NE(&from, this);
  const NeighborGossip* source =
      ::google::protobuf::DynamicCastToGenerated<NeighborGossip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.NeighborGossip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.NeighborGossip)
    MergeFrom(*source);
  }
}

void NeighborGossip::MergeFrom(const NeighborGossip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.NeighborGossip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_neighbor()) {
    mutable_neighbor()->::ofs::c2m::Neighbor::MergeFrom(from.neighbor());
  }
}

void NeighborGossip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.NeighborGossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeighborGossip::CopyFrom(const NeighborGossip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.NeighborGossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighborGossip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_neighbor()) {
    if (!this->neighbor_->IsInitialized()) return false;
  }
  return true;
}

void NeighborGossip::Swap(NeighborGossip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeighborGossip::InternalSwap(NeighborGossip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(neighbor_, other->neighbor_);
}

::google::protobuf::Metadata NeighborGossip::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WriteNotify::InitAsDefaultInstance() {
}
class WriteNotify::HasBitSetters {
 public:
  static void set_has_blockid(WriteNotify* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_version(WriteNotify* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_newversion(WriteNotify* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_offset(WriteNotify* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_data(WriteNotify* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteNotify::kBlockidFieldNumber;
const int WriteNotify::kVersionFieldNumber;
const int WriteNotify::kNewversionFieldNumber;
const int WriteNotify::kOffsetFieldNumber;
const int WriteNotify::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteNotify::WriteNotify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.WriteNotify)
}
WriteNotify::WriteNotify(const WriteNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&blockid_, &from.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&blockid_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.WriteNotify)
}

void WriteNotify::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WriteNotify_Chunk_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&blockid_)) + sizeof(offset_));
}

WriteNotify::~WriteNotify() {
  // @@protoc_insertion_point(destructor:ofs.c2m.WriteNotify)
  SharedDtor();
}

void WriteNotify::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteNotify& WriteNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WriteNotify_Chunk_2eproto.base);
  return *internal_default_instance();
}


void WriteNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.WriteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&blockid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&blockid_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WriteNotify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WriteNotify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_blockid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 newversion = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_newversion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 offset = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ofs.c2m.WriteNotify.data");
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WriteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.WriteNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_blockid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 newversion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_newversion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_offset(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ofs.c2m.WriteNotify.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.WriteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.WriteNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WriteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.WriteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->blockid(), output);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // required int64 newversion = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->newversion(), output);
  }

  // required int32 offset = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }

  // required string data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.WriteNotify.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.WriteNotify)
}

::google::protobuf::uint8* WriteNotify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.WriteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->blockid(), target);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // required int64 newversion = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->newversion(), target);
  }

  // required int32 offset = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }

  // required string data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.WriteNotify.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.WriteNotify)
  return target;
}

size_t WriteNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.WriteNotify)
  size_t total_size = 0;

  if (has_data()) {
    // required string data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  if (has_blockid()) {
    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());
  }

  if (has_version()) {
    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_newversion()) {
    // required int64 newversion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newversion());
  }

  if (has_offset()) {
    // required int32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset());
  }

  return total_size;
}
size_t WriteNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.WriteNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());

    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());

    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int64 newversion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newversion());

    // required int32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.WriteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteNotify* source =
      ::google::protobuf::DynamicCastToGenerated<WriteNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.WriteNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.WriteNotify)
    MergeFrom(*source);
  }
}

void WriteNotify::MergeFrom(const WriteNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.WriteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      blockid_ = from.blockid_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      newversion_ = from.newversion_;
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WriteNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.WriteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteNotify::CopyFrom(const WriteNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.WriteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void WriteNotify::Swap(WriteNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteNotify::InternalSwap(WriteNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(blockid_, other->blockid_);
  swap(version_, other->version_);
  swap(newversion_, other->newversion_);
  swap(offset_, other->offset_);
}

::google::protobuf::Metadata WriteNotify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AppendNotify::InitAsDefaultInstance() {
}
class AppendNotify::HasBitSetters {
 public:
  static void set_has_blockid(AppendNotify* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_version(AppendNotify* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_newversion(AppendNotify* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_data(AppendNotify* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendNotify::kBlockidFieldNumber;
const int AppendNotify::kVersionFieldNumber;
const int AppendNotify::kNewversionFieldNumber;
const int AppendNotify::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendNotify::AppendNotify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.AppendNotify)
}
AppendNotify::AppendNotify(const AppendNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&blockid_, &from.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&newversion_) -
    reinterpret_cast<char*>(&blockid_)) + sizeof(newversion_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.AppendNotify)
}

void AppendNotify::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AppendNotify_Chunk_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newversion_) -
      reinterpret_cast<char*>(&blockid_)) + sizeof(newversion_));
}

AppendNotify::~AppendNotify() {
  // @@protoc_insertion_point(destructor:ofs.c2m.AppendNotify)
  SharedDtor();
}

void AppendNotify::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AppendNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendNotify& AppendNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AppendNotify_Chunk_2eproto.base);
  return *internal_default_instance();
}


void AppendNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.AppendNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&blockid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newversion_) -
        reinterpret_cast<char*>(&blockid_)) + sizeof(newversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppendNotify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AppendNotify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_blockid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 newversion = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_newversion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ofs.c2m.AppendNotify.data");
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.AppendNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_blockid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 newversion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_newversion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ofs.c2m.AppendNotify.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.AppendNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.AppendNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.AppendNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->blockid(), output);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // required int64 newversion = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->newversion(), output);
  }

  // required string data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.AppendNotify.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.AppendNotify)
}

::google::protobuf::uint8* AppendNotify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.AppendNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->blockid(), target);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // required int64 newversion = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->newversion(), target);
  }

  // required string data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.AppendNotify.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.AppendNotify)
  return target;
}

size_t AppendNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.AppendNotify)
  size_t total_size = 0;

  if (has_data()) {
    // required string data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  if (has_blockid()) {
    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());
  }

  if (has_version()) {
    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_newversion()) {
    // required int64 newversion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newversion());
  }

  return total_size;
}
size_t AppendNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.AppendNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());

    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());

    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int64 newversion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.AppendNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendNotify* source =
      ::google::protobuf::DynamicCastToGenerated<AppendNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.AppendNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.AppendNotify)
    MergeFrom(*source);
  }
}

void AppendNotify::MergeFrom(const AppendNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.AppendNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      blockid_ = from.blockid_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      newversion_ = from.newversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppendNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.AppendNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendNotify::CopyFrom(const AppendNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.AppendNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void AppendNotify::Swap(AppendNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendNotify::InternalSwap(AppendNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(blockid_, other->blockid_);
  swap(version_, other->version_);
  swap(newversion_, other->newversion_);
}

::google::protobuf::Metadata AppendNotify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ResizeBlock::InitAsDefaultInstance() {
}
class ResizeBlock::HasBitSetters {
 public:
  static void set_has_blockid(ResizeBlock* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_version(ResizeBlock* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_size(ResizeBlock* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResizeBlock::kBlockidFieldNumber;
const int ResizeBlock::kVersionFieldNumber;
const int ResizeBlock::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResizeBlock::ResizeBlock()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.ResizeBlock)
}
ResizeBlock::ResizeBlock(const ResizeBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blockid_, &from.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&blockid_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.ResizeBlock)
}

void ResizeBlock::SharedCtor() {
  ::memset(&blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&blockid_)) + sizeof(size_));
}

ResizeBlock::~ResizeBlock() {
  // @@protoc_insertion_point(destructor:ofs.c2m.ResizeBlock)
  SharedDtor();
}

void ResizeBlock::SharedDtor() {
}

void ResizeBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResizeBlock& ResizeBlock::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResizeBlock_Chunk_2eproto.base);
  return *internal_default_instance();
}


void ResizeBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.ResizeBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&blockid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&blockid_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResizeBlock::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResizeBlock*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_blockid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResizeBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.ResizeBlock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_blockid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.ResizeBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.ResizeBlock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResizeBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.ResizeBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->blockid(), output);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // required int32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.ResizeBlock)
}

::google::protobuf::uint8* ResizeBlock::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.ResizeBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->blockid(), target);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // required int32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.ResizeBlock)
  return target;
}

size_t ResizeBlock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.ResizeBlock)
  size_t total_size = 0;

  if (has_blockid()) {
    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());
  }

  if (has_version()) {
    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_size()) {
    // required int32 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  return total_size;
}
size_t ResizeBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.ResizeBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());

    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int32 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResizeBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.ResizeBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const ResizeBlock* source =
      ::google::protobuf::DynamicCastToGenerated<ResizeBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.ResizeBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.ResizeBlock)
    MergeFrom(*source);
  }
}

void ResizeBlock::MergeFrom(const ResizeBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.ResizeBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      blockid_ = from.blockid_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResizeBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.ResizeBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResizeBlock::CopyFrom(const ResizeBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.ResizeBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResizeBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ResizeBlock::Swap(ResizeBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResizeBlock::InternalSwap(ResizeBlock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(blockid_, other->blockid_);
  swap(version_, other->version_);
  swap(size_, other->size_);
}

::google::protobuf::Metadata ResizeBlock::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecoverBlockData::InitAsDefaultInstance() {
}
class RecoverBlockData::HasBitSetters {
 public:
  static void set_has_blockid(RecoverBlockData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_version(RecoverBlockData* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_offset(RecoverBlockData* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_data(RecoverBlockData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecoverBlockData::kBlockidFieldNumber;
const int RecoverBlockData::kVersionFieldNumber;
const int RecoverBlockData::kOffsetFieldNumber;
const int RecoverBlockData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoverBlockData::RecoverBlockData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.RecoverBlockData)
}
RecoverBlockData::RecoverBlockData(const RecoverBlockData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&blockid_, &from.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&blockid_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.RecoverBlockData)
}

void RecoverBlockData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RecoverBlockData_Chunk_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&blockid_)) + sizeof(offset_));
}

RecoverBlockData::~RecoverBlockData() {
  // @@protoc_insertion_point(destructor:ofs.c2m.RecoverBlockData)
  SharedDtor();
}

void RecoverBlockData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RecoverBlockData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecoverBlockData& RecoverBlockData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecoverBlockData_Chunk_2eproto.base);
  return *internal_default_instance();
}


void RecoverBlockData::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.RecoverBlockData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&blockid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&blockid_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecoverBlockData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecoverBlockData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_blockid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 offset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bytes data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecoverBlockData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.RecoverBlockData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_blockid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_offset(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.RecoverBlockData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.RecoverBlockData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecoverBlockData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.RecoverBlockData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->blockid(), output);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // required int32 offset = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  // required bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.RecoverBlockData)
}

::google::protobuf::uint8* RecoverBlockData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.RecoverBlockData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->blockid(), target);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // required int32 offset = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  // required bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.RecoverBlockData)
  return target;
}

size_t RecoverBlockData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.RecoverBlockData)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_blockid()) {
    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());
  }

  if (has_version()) {
    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_offset()) {
    // required int32 offset = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset());
  }

  return total_size;
}
size_t RecoverBlockData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.RecoverBlockData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());

    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int32 offset = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoverBlockData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.RecoverBlockData)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoverBlockData* source =
      ::google::protobuf::DynamicCastToGenerated<RecoverBlockData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.RecoverBlockData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.RecoverBlockData)
    MergeFrom(*source);
  }
}

void RecoverBlockData::MergeFrom(const RecoverBlockData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.RecoverBlockData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      blockid_ = from.blockid_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecoverBlockData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.RecoverBlockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverBlockData::CopyFrom(const RecoverBlockData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.RecoverBlockData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverBlockData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void RecoverBlockData::Swap(RecoverBlockData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoverBlockData::InternalSwap(RecoverBlockData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(blockid_, other->blockid_);
  swap(version_, other->version_);
  swap(offset_, other->offset_);
}

::google::protobuf::Metadata RecoverBlockData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecoverBlockComplete::InitAsDefaultInstance() {
}
class RecoverBlockComplete::HasBitSetters {
 public:
  static void set_has_blockid(RecoverBlockComplete* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_version(RecoverBlockComplete* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecoverBlockComplete::kBlockidFieldNumber;
const int RecoverBlockComplete::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoverBlockComplete::RecoverBlockComplete()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.RecoverBlockComplete)
}
RecoverBlockComplete::RecoverBlockComplete(const RecoverBlockComplete& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blockid_, &from.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&blockid_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.RecoverBlockComplete)
}

void RecoverBlockComplete::SharedCtor() {
  ::memset(&blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&blockid_)) + sizeof(version_));
}

RecoverBlockComplete::~RecoverBlockComplete() {
  // @@protoc_insertion_point(destructor:ofs.c2m.RecoverBlockComplete)
  SharedDtor();
}

void RecoverBlockComplete::SharedDtor() {
}

void RecoverBlockComplete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecoverBlockComplete& RecoverBlockComplete::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecoverBlockComplete_Chunk_2eproto.base);
  return *internal_default_instance();
}


void RecoverBlockComplete::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.RecoverBlockComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&blockid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&blockid_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecoverBlockComplete::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecoverBlockComplete*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_blockid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecoverBlockComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.RecoverBlockComplete)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_blockid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.RecoverBlockComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.RecoverBlockComplete)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecoverBlockComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.RecoverBlockComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->blockid(), output);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.RecoverBlockComplete)
}

::google::protobuf::uint8* RecoverBlockComplete::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.RecoverBlockComplete)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->blockid(), target);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.RecoverBlockComplete)
  return target;
}

size_t RecoverBlockComplete::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.RecoverBlockComplete)
  size_t total_size = 0;

  if (has_blockid()) {
    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());
  }

  if (has_version()) {
    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  return total_size;
}
size_t RecoverBlockComplete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.RecoverBlockComplete)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());

    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoverBlockComplete::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.RecoverBlockComplete)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoverBlockComplete* source =
      ::google::protobuf::DynamicCastToGenerated<RecoverBlockComplete>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.RecoverBlockComplete)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.RecoverBlockComplete)
    MergeFrom(*source);
  }
}

void RecoverBlockComplete::MergeFrom(const RecoverBlockComplete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.RecoverBlockComplete)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      blockid_ = from.blockid_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecoverBlockComplete::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.RecoverBlockComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverBlockComplete::CopyFrom(const RecoverBlockComplete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.RecoverBlockComplete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverBlockComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RecoverBlockComplete::Swap(RecoverBlockComplete* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoverBlockComplete::InternalSwap(RecoverBlockComplete* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(blockid_, other->blockid_);
  swap(version_, other->version_);
}

::google::protobuf::Metadata RecoverBlockComplete::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace c2m
}  // namespace ofs
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ofs::c2m::IpAddress* Arena::CreateMaybeMessage< ::ofs::c2m::IpAddress >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::IpAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::NodeInfo* Arena::CreateMaybeMessage< ::ofs::c2m::NodeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::Register* Arena::CreateMaybeMessage< ::ofs::c2m::Register >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::Register >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::Neighbor* Arena::CreateMaybeMessage< ::ofs::c2m::Neighbor >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::Neighbor >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::NeighborNotify* Arena::CreateMaybeMessage< ::ofs::c2m::NeighborNotify >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::NeighborNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::BlockStatus* Arena::CreateMaybeMessage< ::ofs::c2m::BlockStatus >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::BlockStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::Heartbeat* Arena::CreateMaybeMessage< ::ofs::c2m::Heartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::UpdataBlock* Arena::CreateMaybeMessage< ::ofs::c2m::UpdataBlock >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::UpdataBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::ReportBlock* Arena::CreateMaybeMessage< ::ofs::c2m::ReportBlock >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::ReportBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::RecoverBlock* Arena::CreateMaybeMessage< ::ofs::c2m::RecoverBlock >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::RecoverBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::CleanBlock* Arena::CreateMaybeMessage< ::ofs::c2m::CleanBlock >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::CleanBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::CleanComplete* Arena::CreateMaybeMessage< ::ofs::c2m::CleanComplete >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::CleanComplete >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::NeighborGossip* Arena::CreateMaybeMessage< ::ofs::c2m::NeighborGossip >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::NeighborGossip >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::WriteNotify* Arena::CreateMaybeMessage< ::ofs::c2m::WriteNotify >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::WriteNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::AppendNotify* Arena::CreateMaybeMessage< ::ofs::c2m::AppendNotify >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::AppendNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::ResizeBlock* Arena::CreateMaybeMessage< ::ofs::c2m::ResizeBlock >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::ResizeBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::RecoverBlockData* Arena::CreateMaybeMessage< ::ofs::c2m::RecoverBlockData >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::RecoverBlockData >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::RecoverBlockComplete* Arena::CreateMaybeMessage< ::ofs::c2m::RecoverBlockComplete >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::RecoverBlockComplete >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

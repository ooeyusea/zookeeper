// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chunk.proto

#include "Chunk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BlockStatus_Chunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IpAddress_Chunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Lease_Chunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeInfo_Chunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RecoverInfo_Chunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Chunk_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Neighbor_Chunk_2eproto;
namespace ofs {
namespace c2m {
class IpAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IpAddress> _instance;
} _IpAddress_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeInfo> _instance;
} _NodeInfo_default_instance_;
class RegisterChunkServerRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterChunkServerRequest> _instance;
} _RegisterChunkServerRequest_default_instance_;
class NeighborDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Neighbor> _instance;
} _Neighbor_default_instance_;
class RegisterChunkServerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterChunkServerResponse> _instance;
} _RegisterChunkServerResponse_default_instance_;
class BlockStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockStatus> _instance;
} _BlockStatus_default_instance_;
class HeartbeatRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartbeatRequest> _instance;
} _HeartbeatRequest_default_instance_;
class HeartbeatResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartbeatResponse> _instance;
} _HeartbeatResponse_default_instance_;
class ReportRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportRequest> _instance;
} _ReportRequest_default_instance_;
class RecoverInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecoverInfo> _instance;
} _RecoverInfo_default_instance_;
class ReportResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReportResponse> _instance;
} _ReportResponse_default_instance_;
class RenewLeaseRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RenewLeaseRequest> _instance;
} _RenewLeaseRequest_default_instance_;
class LeaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lease> _instance;
} _Lease_default_instance_;
class RenewLeaseResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RenewLeaseResponse> _instance;
} _RenewLeaseResponse_default_instance_;
class NeighborGossipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NeighborGossip> _instance;
} _NeighborGossip_default_instance_;
class WriteNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteNotify> _instance;
} _WriteNotify_default_instance_;
class AppendNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendNotify> _instance;
} _AppendNotify_default_instance_;
}  // namespace c2m
}  // namespace ofs
static void InitDefaultsIpAddress_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_IpAddress_default_instance_;
    new (ptr) ::ofs::c2m::IpAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::IpAddress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IpAddress_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIpAddress_Chunk_2eproto}, {}};

static void InitDefaultsNodeInfo_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_NodeInfo_default_instance_;
    new (ptr) ::ofs::c2m::NodeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::NodeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeInfo_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeInfo_Chunk_2eproto}, {}};

static void InitDefaultsRegisterChunkServerRequest_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_RegisterChunkServerRequest_default_instance_;
    new (ptr) ::ofs::c2m::RegisterChunkServerRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::RegisterChunkServerRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RegisterChunkServerRequest_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRegisterChunkServerRequest_Chunk_2eproto}, {
      &scc_info_IpAddress_Chunk_2eproto.base,
      &scc_info_NodeInfo_Chunk_2eproto.base,}};

static void InitDefaultsNeighbor_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_Neighbor_default_instance_;
    new (ptr) ::ofs::c2m::Neighbor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::Neighbor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Neighbor_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNeighbor_Chunk_2eproto}, {
      &scc_info_IpAddress_Chunk_2eproto.base,}};

static void InitDefaultsRegisterChunkServerResponse_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_RegisterChunkServerResponse_default_instance_;
    new (ptr) ::ofs::c2m::RegisterChunkServerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::RegisterChunkServerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegisterChunkServerResponse_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegisterChunkServerResponse_Chunk_2eproto}, {
      &scc_info_Neighbor_Chunk_2eproto.base,}};

static void InitDefaultsBlockStatus_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_BlockStatus_default_instance_;
    new (ptr) ::ofs::c2m::BlockStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::BlockStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BlockStatus_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBlockStatus_Chunk_2eproto}, {}};

static void InitDefaultsHeartbeatRequest_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_HeartbeatRequest_default_instance_;
    new (ptr) ::ofs::c2m::HeartbeatRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::HeartbeatRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HeartbeatRequest_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeartbeatRequest_Chunk_2eproto}, {
      &scc_info_NodeInfo_Chunk_2eproto.base,}};

static void InitDefaultsHeartbeatResponse_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_HeartbeatResponse_default_instance_;
    new (ptr) ::ofs::c2m::HeartbeatResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::HeartbeatResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HeartbeatResponse_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeartbeatResponse_Chunk_2eproto}, {}};

static void InitDefaultsReportRequest_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_ReportRequest_default_instance_;
    new (ptr) ::ofs::c2m::ReportRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::ReportRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReportRequest_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReportRequest_Chunk_2eproto}, {
      &scc_info_BlockStatus_Chunk_2eproto.base,}};

static void InitDefaultsRecoverInfo_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_RecoverInfo_default_instance_;
    new (ptr) ::ofs::c2m::RecoverInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::RecoverInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RecoverInfo_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRecoverInfo_Chunk_2eproto}, {}};

static void InitDefaultsReportResponse_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_ReportResponse_default_instance_;
    new (ptr) ::ofs::c2m::ReportResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::ReportResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ReportResponse_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReportResponse_Chunk_2eproto}, {
      &scc_info_RecoverInfo_Chunk_2eproto.base,}};

static void InitDefaultsRenewLeaseRequest_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_RenewLeaseRequest_default_instance_;
    new (ptr) ::ofs::c2m::RenewLeaseRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::RenewLeaseRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RenewLeaseRequest_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRenewLeaseRequest_Chunk_2eproto}, {}};

static void InitDefaultsLease_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_Lease_default_instance_;
    new (ptr) ::ofs::c2m::Lease();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::Lease::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Lease_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLease_Chunk_2eproto}, {}};

static void InitDefaultsRenewLeaseResponse_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_RenewLeaseResponse_default_instance_;
    new (ptr) ::ofs::c2m::RenewLeaseResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::RenewLeaseResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RenewLeaseResponse_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRenewLeaseResponse_Chunk_2eproto}, {
      &scc_info_Lease_Chunk_2eproto.base,}};

static void InitDefaultsNeighborGossip_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_NeighborGossip_default_instance_;
    new (ptr) ::ofs::c2m::NeighborGossip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::NeighborGossip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NeighborGossip_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNeighborGossip_Chunk_2eproto}, {
      &scc_info_Neighbor_Chunk_2eproto.base,}};

static void InitDefaultsWriteNotify_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_WriteNotify_default_instance_;
    new (ptr) ::ofs::c2m::WriteNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::WriteNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteNotify_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteNotify_Chunk_2eproto}, {}};

static void InitDefaultsAppendNotify_Chunk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ofs::c2m::_AppendNotify_default_instance_;
    new (ptr) ::ofs::c2m::AppendNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ofs::c2m::AppendNotify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AppendNotify_Chunk_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAppendNotify_Chunk_2eproto}, {}};

void InitDefaults_Chunk_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_IpAddress_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeInfo_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterChunkServerRequest_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Neighbor_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterChunkServerResponse_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlockStatus_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartbeatRequest_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartbeatResponse_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportRequest_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecoverInfo_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReportResponse_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RenewLeaseRequest_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lease_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RenewLeaseResponse_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NeighborGossip_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteNotify_Chunk_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendNotify_Chunk_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_Chunk_2eproto[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_Chunk_2eproto[1];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_Chunk_2eproto[1];

const ::google::protobuf::uint32 TableStruct_Chunk_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::IpAddress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::IpAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::IpAddress, host_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::IpAddress, port_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, cpu_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, res_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, vss_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, disk_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NodeInfo, fault_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerRequest, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerRequest, outpost_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerRequest, harbor_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerRequest, rack_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerRequest, dc_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerRequest, node_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerRequest, extend_),
  4,
  1,
  2,
  5,
  6,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Neighbor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Neighbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Neighbor, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Neighbor, harbor_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerResponse, ok_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RegisterChunkServerResponse, neighbor_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::BlockStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::BlockStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::BlockStatus, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::BlockStatus, version_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::BlockStatus, size_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::HeartbeatRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::HeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::HeartbeatRequest, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::HeartbeatRequest, node_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::HeartbeatResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::HeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::HeartbeatResponse, ok_),
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ReportRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ReportRequest, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ReportRequest, block_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverInfo, until_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverInfo, version_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverInfo, newversion_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverInfo, copyto_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RecoverInfo, chunkservers_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ReportResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ReportResponse, errcode_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::ReportResponse, recoverinfo_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RenewLeaseRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RenewLeaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RenewLeaseRequest, id_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RenewLeaseRequest, blockid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Lease, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Lease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Lease, until_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Lease, version_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Lease, newversion_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::Lease, chunkservers_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RenewLeaseResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RenewLeaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RenewLeaseResponse, errcode_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::RenewLeaseResponse, lease_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NeighborGossip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NeighborGossip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::NeighborGossip, neighbor_),
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, blockid_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, version_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, newversion_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, offset_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::WriteNotify, data_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::AppendNotify, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::AppendNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::AppendNotify, blockid_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::AppendNotify, version_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::AppendNotify, newversion_),
  PROTOBUF_FIELD_OFFSET(::ofs::c2m::AppendNotify, data_),
  1,
  2,
  3,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::ofs::c2m::IpAddress)},
  { 9, 19, sizeof(::ofs::c2m::NodeInfo)},
  { 24, 36, sizeof(::ofs::c2m::RegisterChunkServerRequest)},
  { 43, 50, sizeof(::ofs::c2m::Neighbor)},
  { 52, 59, sizeof(::ofs::c2m::RegisterChunkServerResponse)},
  { 61, 69, sizeof(::ofs::c2m::BlockStatus)},
  { 72, 79, sizeof(::ofs::c2m::HeartbeatRequest)},
  { 81, 87, sizeof(::ofs::c2m::HeartbeatResponse)},
  { 88, 95, sizeof(::ofs::c2m::ReportRequest)},
  { 97, 107, sizeof(::ofs::c2m::RecoverInfo)},
  { 112, 119, sizeof(::ofs::c2m::ReportResponse)},
  { 121, 128, sizeof(::ofs::c2m::RenewLeaseRequest)},
  { 130, 139, sizeof(::ofs::c2m::Lease)},
  { 143, 150, sizeof(::ofs::c2m::RenewLeaseResponse)},
  { 152, 158, sizeof(::ofs::c2m::NeighborGossip)},
  { 159, 169, sizeof(::ofs::c2m::WriteNotify)},
  { 174, 183, sizeof(::ofs::c2m::AppendNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_IpAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_NodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_RegisterChunkServerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_Neighbor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_RegisterChunkServerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_BlockStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_HeartbeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_HeartbeatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_ReportRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_RecoverInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_ReportResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_RenewLeaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_Lease_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_RenewLeaseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_NeighborGossip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_WriteNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ofs::c2m::_AppendNotify_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_Chunk_2eproto = {
  {}, AddDescriptors_Chunk_2eproto, "Chunk.proto", schemas,
  file_default_instances, TableStruct_Chunk_2eproto::offsets,
  file_level_metadata_Chunk_2eproto, 17, file_level_enum_descriptors_Chunk_2eproto, file_level_service_descriptors_Chunk_2eproto,
};

const char descriptor_table_protodef_Chunk_2eproto[] =
  "\n\013Chunk.proto\022\007ofs.c2m\"\'\n\tIpAddress\022\014\n\004h"
  "ost\030\001 \002(\t\022\014\n\004port\030\002 \002(\005\"N\n\010NodeInfo\022\013\n\003c"
  "pu\030\001 \002(\005\022\013\n\003res\030\002 \002(\005\022\013\n\003vss\030\003 \002(\005\022\014\n\004di"
  "sk\030\004 \002(\005\022\r\n\005fault\030\005 \002(\010\"\274\001\n\032RegisterChun"
  "kServerRequest\022\n\n\002id\030\001 \002(\005\022#\n\007outpost\030\002 "
  "\002(\0132\022.ofs.c2m.IpAddress\022\"\n\006harbor\030\003 \002(\0132"
  "\022.ofs.c2m.IpAddress\022\014\n\004rack\030\004 \002(\005\022\n\n\002dc\030"
  "\005 \002(\005\022\037\n\004node\030\006 \002(\0132\021.ofs.c2m.NodeInfo\022\016"
  "\n\006extend\030\007 \002(\t\":\n\010Neighbor\022\n\n\002id\030\001 \002(\005\022\""
  "\n\006harbor\030\002 \002(\0132\022.ofs.c2m.IpAddress\"N\n\033Re"
  "gisterChunkServerResponse\022\n\n\002ok\030\001 \002(\010\022#\n"
  "\010neighbor\030\002 \002(\0132\021.ofs.c2m.Neighbor\"8\n\013Bl"
  "ockStatus\022\n\n\002id\030\001 \002(\003\022\017\n\007version\030\002 \002(\003\022\014"
  "\n\004size\030\003 \002(\005\"\?\n\020HeartbeatRequest\022\n\n\002id\030\001"
  " \002(\005\022\037\n\004node\030\002 \002(\0132\021.ofs.c2m.NodeInfo\"\037\n"
  "\021HeartbeatResponse\022\n\n\002ok\030\001 \002(\010\"@\n\rReport"
  "Request\022\n\n\002id\030\001 \002(\005\022#\n\005block\030\002 \002(\0132\024.ofs"
  ".c2m.BlockStatus\"g\n\013RecoverInfo\022\r\n\005until"
  "\030\001 \002(\003\022\017\n\007version\030\002 \002(\003\022\022\n\nnewVersion\030\003 "
  "\002(\003\022\016\n\006copyTo\030\004 \002(\005\022\024\n\014chunkservers\030\005 \003("
  "\005\"`\n\016ReportResponse\022#\n\007errCode\030\001 \002(\0162\022.o"
  "fs.c2m.ErrorCode\022)\n\013recoverInfo\030\002 \001(\0132\024."
  "ofs.c2m.RecoverInfo\"0\n\021RenewLeaseRequest"
  "\022\n\n\002id\030\001 \002(\005\022\017\n\007blockId\030\002 \002(\003\"Q\n\005Lease\022\r"
  "\n\005until\030\001 \002(\003\022\017\n\007version\030\002 \002(\003\022\022\n\nnewVer"
  "sion\030\003 \002(\003\022\024\n\014chunkservers\030\004 \003(\005\"X\n\022Rene"
  "wLeaseResponse\022#\n\007errCode\030\001 \002(\0162\022.ofs.c2"
  "m.ErrorCode\022\035\n\005lease\030\002 \001(\0132\016.ofs.c2m.Lea"
  "se\"5\n\016NeighborGossip\022#\n\010neighbor\030\001 \002(\0132\021"
  ".ofs.c2m.Neighbor\"a\n\013WriteNotify\022\017\n\007bloc"
  "kid\030\001 \002(\003\022\017\n\007version\030\002 \002(\003\022\022\n\nnewversion"
  "\030\003 \002(\003\022\016\n\006offset\030\004 \002(\005\022\014\n\004data\030\005 \002(\t\"R\n\014"
  "AppendNotify\022\017\n\007blockid\030\001 \002(\003\022\017\n\007version"
  "\030\002 \002(\003\022\022\n\nnewversion\030\003 \002(\003\022\014\n\004data\030\004 \002(\t"
  "*y\n\tErrorCode\022\t\n\005EC_OK\020\000\022\022\n\016EC_BLOCK_CLE"
  "AN\020\001\022\024\n\020EC_BLOCK_RECOVER\020\002\022\026\n\022EC_BLOCK_N"
  "OT_EXIST\020\003\022\037\n\033EC_REPLICA_DO_NOT_HAS_LEAS"
  "E\020\0042\271\002\n\017OfsChunkService\022`\n\023RegisterChunk"
  "Server\022#.ofs.c2m.RegisterChunkServerRequ"
  "est\032$.ofs.c2m.RegisterChunkServerRespons"
  "e\022B\n\tHeartbeat\022\031.ofs.c2m.HeartbeatReques"
  "t\032\032.ofs.c2m.HeartbeatResponse\0229\n\006Report\022"
  "\026.ofs.c2m.ReportRequest\032\027.ofs.c2m.Report"
  "Response\022E\n\nRenewLease\022\032.ofs.c2m.RenewLe"
  "aseRequest\032\033.ofs.c2m.RenewLeaseResponseB"
  "\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_Chunk_2eproto = {
  false, InitDefaults_Chunk_2eproto, 
  descriptor_table_protodef_Chunk_2eproto,
  "Chunk.proto", &assign_descriptors_table_Chunk_2eproto, 1804,
};

void AddDescriptors_Chunk_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_Chunk_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Chunk_2eproto = []() { AddDescriptors_Chunk_2eproto(); return true; }();
namespace ofs {
namespace c2m {
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Chunk_2eproto);
  return file_level_enum_descriptors_Chunk_2eproto[0];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void IpAddress::InitAsDefaultInstance() {
}
class IpAddress::HasBitSetters {
 public:
  static void set_has_host(IpAddress* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_port(IpAddress* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpAddress::kHostFieldNumber;
const int IpAddress::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpAddress::IpAddress()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.IpAddress)
}
IpAddress::IpAddress(const IpAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.IpAddress)
}

void IpAddress::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_IpAddress_Chunk_2eproto.base);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

IpAddress::~IpAddress() {
  // @@protoc_insertion_point(destructor:ofs.c2m.IpAddress)
  SharedDtor();
}

void IpAddress::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IpAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpAddress& IpAddress::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_IpAddress_Chunk_2eproto.base);
  return *internal_default_instance();
}


void IpAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    host_.ClearNonDefaultToEmptyNoArena();
  }
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IpAddress::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<IpAddress*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string host = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ofs.c2m.IpAddress.host");
        object = msg->mutable_host();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required int32 port = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IpAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.IpAddress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ofs.c2m.IpAddress.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.IpAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.IpAddress)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IpAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.IpAddress.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.IpAddress)
}

::google::protobuf::uint8* IpAddress::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.IpAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.IpAddress.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required int32 port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.IpAddress)
  return target;
}

size_t IpAddress::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.IpAddress)
  size_t total_size = 0;

  if (has_host()) {
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  if (has_port()) {
    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  return total_size;
}
size_t IpAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.IpAddress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string host = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());

    // required int32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.IpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const IpAddress* source =
      ::google::protobuf::DynamicCastToGenerated<IpAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.IpAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.IpAddress)
    MergeFrom(*source);
  }
}

void IpAddress::MergeFrom(const IpAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.IpAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.IpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpAddress::CopyFrom(const IpAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.IpAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void IpAddress::Swap(IpAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpAddress::InternalSwap(IpAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  host_.Swap(&other->host_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
}

::google::protobuf::Metadata IpAddress::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
}
class NodeInfo::HasBitSetters {
 public:
  static void set_has_cpu(NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_res(NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_vss(NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_disk(NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_fault(NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfo::kCpuFieldNumber;
const int NodeInfo::kResFieldNumber;
const int NodeInfo::kVssFieldNumber;
const int NodeInfo::kDiskFieldNumber;
const int NodeInfo::kFaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfo::NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cpu_, &from.cpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&fault_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(fault_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ::memset(&cpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fault_) -
      reinterpret_cast<char*>(&cpu_)) + sizeof(fault_));
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:ofs.c2m.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
}

void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo& NodeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeInfo_Chunk_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fault_) -
        reinterpret_cast<char*>(&cpu_)) + sizeof(fault_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 cpu = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_cpu(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 res = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_res(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 vss = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_vss(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 disk = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_disk(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool fault = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_fault(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.NodeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cpu = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_cpu(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 res = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_res(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vss = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_vss(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 disk = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_disk(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool fault = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_fault(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.NodeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cpu(), output);
  }

  // required int32 res = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->res(), output);
  }

  // required int32 vss = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vss(), output);
  }

  // required int32 disk = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->disk(), output);
  }

  // required bool fault = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fault(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.NodeInfo)
}

::google::protobuf::uint8* NodeInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cpu(), target);
  }

  // required int32 res = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->res(), target);
  }

  // required int32 vss = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vss(), target);
  }

  // required int32 disk = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->disk(), target);
  }

  // required bool fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fault(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.NodeInfo)
  return target;
}

size_t NodeInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.NodeInfo)
  size_t total_size = 0;

  if (has_cpu()) {
    // required int32 cpu = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpu());
  }

  if (has_res()) {
    // required int32 res = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->res());
  }

  if (has_vss()) {
    // required int32 vss = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vss());
  }

  if (has_disk()) {
    // required int32 disk = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->disk());
  }

  if (has_fault()) {
    // required bool fault = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.NodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 cpu = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cpu());

    // required int32 res = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->res());

    // required int32 vss = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vss());

    // required int32 disk = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->disk());

    // required bool fault = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::google::protobuf::DynamicCastToGenerated<NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      cpu_ = from.cpu_;
    }
    if (cached_has_bits & 0x00000002u) {
      res_ = from.res_;
    }
    if (cached_has_bits & 0x00000004u) {
      vss_ = from.vss_;
    }
    if (cached_has_bits & 0x00000008u) {
      disk_ = from.disk_;
    }
    if (cached_has_bits & 0x00000010u) {
      fault_ = from.fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cpu_, other->cpu_);
  swap(res_, other->res_);
  swap(vss_, other->vss_);
  swap(disk_, other->disk_);
  swap(fault_, other->fault_);
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegisterChunkServerRequest::InitAsDefaultInstance() {
  ::ofs::c2m::_RegisterChunkServerRequest_default_instance_._instance.get_mutable()->outpost_ = const_cast< ::ofs::c2m::IpAddress*>(
      ::ofs::c2m::IpAddress::internal_default_instance());
  ::ofs::c2m::_RegisterChunkServerRequest_default_instance_._instance.get_mutable()->harbor_ = const_cast< ::ofs::c2m::IpAddress*>(
      ::ofs::c2m::IpAddress::internal_default_instance());
  ::ofs::c2m::_RegisterChunkServerRequest_default_instance_._instance.get_mutable()->node_ = const_cast< ::ofs::c2m::NodeInfo*>(
      ::ofs::c2m::NodeInfo::internal_default_instance());
}
class RegisterChunkServerRequest::HasBitSetters {
 public:
  static void set_has_id(RegisterChunkServerRequest* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::ofs::c2m::IpAddress& outpost(const RegisterChunkServerRequest* msg);
  static void set_has_outpost(RegisterChunkServerRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ofs::c2m::IpAddress& harbor(const RegisterChunkServerRequest* msg);
  static void set_has_harbor(RegisterChunkServerRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_rack(RegisterChunkServerRequest* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_dc(RegisterChunkServerRequest* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::ofs::c2m::NodeInfo& node(const RegisterChunkServerRequest* msg);
  static void set_has_node(RegisterChunkServerRequest* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_extend(RegisterChunkServerRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::IpAddress&
RegisterChunkServerRequest::HasBitSetters::outpost(const RegisterChunkServerRequest* msg) {
  return *msg->outpost_;
}
const ::ofs::c2m::IpAddress&
RegisterChunkServerRequest::HasBitSetters::harbor(const RegisterChunkServerRequest* msg) {
  return *msg->harbor_;
}
const ::ofs::c2m::NodeInfo&
RegisterChunkServerRequest::HasBitSetters::node(const RegisterChunkServerRequest* msg) {
  return *msg->node_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterChunkServerRequest::kIdFieldNumber;
const int RegisterChunkServerRequest::kOutpostFieldNumber;
const int RegisterChunkServerRequest::kHarborFieldNumber;
const int RegisterChunkServerRequest::kRackFieldNumber;
const int RegisterChunkServerRequest::kDcFieldNumber;
const int RegisterChunkServerRequest::kNodeFieldNumber;
const int RegisterChunkServerRequest::kExtendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterChunkServerRequest::RegisterChunkServerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.RegisterChunkServerRequest)
}
RegisterChunkServerRequest::RegisterChunkServerRequest(const RegisterChunkServerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_extend()) {
    extend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_);
  }
  if (from.has_outpost()) {
    outpost_ = new ::ofs::c2m::IpAddress(*from.outpost_);
  } else {
    outpost_ = nullptr;
  }
  if (from.has_harbor()) {
    harbor_ = new ::ofs::c2m::IpAddress(*from.harbor_);
  } else {
    harbor_ = nullptr;
  }
  if (from.has_node()) {
    node_ = new ::ofs::c2m::NodeInfo(*from.node_);
  } else {
    node_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dc_) -
    reinterpret_cast<char*>(&id_)) + sizeof(dc_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.RegisterChunkServerRequest)
}

void RegisterChunkServerRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegisterChunkServerRequest_Chunk_2eproto.base);
  extend_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&outpost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dc_) -
      reinterpret_cast<char*>(&outpost_)) + sizeof(dc_));
}

RegisterChunkServerRequest::~RegisterChunkServerRequest() {
  // @@protoc_insertion_point(destructor:ofs.c2m.RegisterChunkServerRequest)
  SharedDtor();
}

void RegisterChunkServerRequest::SharedDtor() {
  extend_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete outpost_;
  if (this != internal_default_instance()) delete harbor_;
  if (this != internal_default_instance()) delete node_;
}

void RegisterChunkServerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterChunkServerRequest& RegisterChunkServerRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegisterChunkServerRequest_Chunk_2eproto.base);
  return *internal_default_instance();
}


void RegisterChunkServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.RegisterChunkServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      extend_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(outpost_ != nullptr);
      outpost_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(harbor_ != nullptr);
      harbor_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(node_ != nullptr);
      node_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dc_) -
        reinterpret_cast<char*>(&id_)) + sizeof(dc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterChunkServerRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegisterChunkServerRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ofs.c2m.IpAddress outpost = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::IpAddress::_InternalParse;
        object = msg->mutable_outpost();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required .ofs.c2m.IpAddress harbor = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::IpAddress::_InternalParse;
        object = msg->mutable_harbor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required int32 rack = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_rack(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 dc = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_dc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ofs.c2m.NodeInfo node = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::NodeInfo::_InternalParse;
        object = msg->mutable_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // required string extend = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ofs.c2m.RegisterChunkServerRequest.extend");
        object = msg->mutable_extend();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterChunkServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.RegisterChunkServerRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.IpAddress outpost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outpost()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.IpAddress harbor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_harbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rack = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_rack(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 dc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_dc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.NodeInfo node = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string extend = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extend().data(), static_cast<int>(this->extend().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ofs.c2m.RegisterChunkServerRequest.extend");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.RegisterChunkServerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.RegisterChunkServerRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterChunkServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.RegisterChunkServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .ofs.c2m.IpAddress outpost = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::outpost(this), output);
  }

  // required .ofs.c2m.IpAddress harbor = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::harbor(this), output);
  }

  // required int32 rack = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rack(), output);
  }

  // required int32 dc = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dc(), output);
  }

  // required .ofs.c2m.NodeInfo node = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::node(this), output);
  }

  // required string extend = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extend().data(), static_cast<int>(this->extend().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.RegisterChunkServerRequest.extend");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->extend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.RegisterChunkServerRequest)
}

::google::protobuf::uint8* RegisterChunkServerRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.RegisterChunkServerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .ofs.c2m.IpAddress outpost = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::outpost(this), target);
  }

  // required .ofs.c2m.IpAddress harbor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::harbor(this), target);
  }

  // required int32 rack = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rack(), target);
  }

  // required int32 dc = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dc(), target);
  }

  // required .ofs.c2m.NodeInfo node = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::node(this), target);
  }

  // required string extend = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extend().data(), static_cast<int>(this->extend().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.RegisterChunkServerRequest.extend");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->extend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.RegisterChunkServerRequest)
  return target;
}

size_t RegisterChunkServerRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.RegisterChunkServerRequest)
  size_t total_size = 0;

  if (has_extend()) {
    // required string extend = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extend());
  }

  if (has_outpost()) {
    // required .ofs.c2m.IpAddress outpost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *outpost_);
  }

  if (has_harbor()) {
    // required .ofs.c2m.IpAddress harbor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *harbor_);
  }

  if (has_node()) {
    // required .ofs.c2m.NodeInfo node = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_rack()) {
    // required int32 rack = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rack());
  }

  if (has_dc()) {
    // required int32 dc = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dc());
  }

  return total_size;
}
size_t RegisterChunkServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.RegisterChunkServerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string extend = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extend());

    // required .ofs.c2m.IpAddress outpost = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *outpost_);

    // required .ofs.c2m.IpAddress harbor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *harbor_);

    // required .ofs.c2m.NodeInfo node = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 rack = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rack());

    // required int32 dc = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterChunkServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.RegisterChunkServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterChunkServerRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RegisterChunkServerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.RegisterChunkServerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.RegisterChunkServerRequest)
    MergeFrom(*source);
  }
}

void RegisterChunkServerRequest::MergeFrom(const RegisterChunkServerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.RegisterChunkServerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      extend_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extend_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_outpost()->::ofs::c2m::IpAddress::MergeFrom(from.outpost());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_harbor()->::ofs::c2m::IpAddress::MergeFrom(from.harbor());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_node()->::ofs::c2m::NodeInfo::MergeFrom(from.node());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      rack_ = from.rack_;
    }
    if (cached_has_bits & 0x00000040u) {
      dc_ = from.dc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterChunkServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.RegisterChunkServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterChunkServerRequest::CopyFrom(const RegisterChunkServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.RegisterChunkServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterChunkServerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_outpost()) {
    if (!this->outpost_->IsInitialized()) return false;
  }
  if (has_harbor()) {
    if (!this->harbor_->IsInitialized()) return false;
  }
  if (has_node()) {
    if (!this->node_->IsInitialized()) return false;
  }
  return true;
}

void RegisterChunkServerRequest::Swap(RegisterChunkServerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterChunkServerRequest::InternalSwap(RegisterChunkServerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extend_.Swap(&other->extend_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(outpost_, other->outpost_);
  swap(harbor_, other->harbor_);
  swap(node_, other->node_);
  swap(id_, other->id_);
  swap(rack_, other->rack_);
  swap(dc_, other->dc_);
}

::google::protobuf::Metadata RegisterChunkServerRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Neighbor::InitAsDefaultInstance() {
  ::ofs::c2m::_Neighbor_default_instance_._instance.get_mutable()->harbor_ = const_cast< ::ofs::c2m::IpAddress*>(
      ::ofs::c2m::IpAddress::internal_default_instance());
}
class Neighbor::HasBitSetters {
 public:
  static void set_has_id(Neighbor* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ofs::c2m::IpAddress& harbor(const Neighbor* msg);
  static void set_has_harbor(Neighbor* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::IpAddress&
Neighbor::HasBitSetters::harbor(const Neighbor* msg) {
  return *msg->harbor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Neighbor::kIdFieldNumber;
const int Neighbor::kHarborFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Neighbor::Neighbor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.Neighbor)
}
Neighbor::Neighbor(const Neighbor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_harbor()) {
    harbor_ = new ::ofs::c2m::IpAddress(*from.harbor_);
  } else {
    harbor_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.Neighbor)
}

void Neighbor::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Neighbor_Chunk_2eproto.base);
  ::memset(&harbor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&harbor_)) + sizeof(id_));
}

Neighbor::~Neighbor() {
  // @@protoc_insertion_point(destructor:ofs.c2m.Neighbor)
  SharedDtor();
}

void Neighbor::SharedDtor() {
  if (this != internal_default_instance()) delete harbor_;
}

void Neighbor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Neighbor& Neighbor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Neighbor_Chunk_2eproto.base);
  return *internal_default_instance();
}


void Neighbor::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.Neighbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(harbor_ != nullptr);
    harbor_->Clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Neighbor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Neighbor*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ofs.c2m.IpAddress harbor = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::IpAddress::_InternalParse;
        object = msg->mutable_harbor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Neighbor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.Neighbor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.IpAddress harbor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_harbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.Neighbor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.Neighbor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Neighbor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.Neighbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .ofs.c2m.IpAddress harbor = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::harbor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.Neighbor)
}

::google::protobuf::uint8* Neighbor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.Neighbor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .ofs.c2m.IpAddress harbor = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::harbor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.Neighbor)
  return target;
}

size_t Neighbor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.Neighbor)
  size_t total_size = 0;

  if (has_harbor()) {
    // required .ofs.c2m.IpAddress harbor = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *harbor_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t Neighbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.Neighbor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ofs.c2m.IpAddress harbor = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *harbor_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Neighbor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.Neighbor)
  GOOGLE_DCHECK_NE(&from, this);
  const Neighbor* source =
      ::google::protobuf::DynamicCastToGenerated<Neighbor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.Neighbor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.Neighbor)
    MergeFrom(*source);
  }
}

void Neighbor::MergeFrom(const Neighbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.Neighbor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_harbor()->::ofs::c2m::IpAddress::MergeFrom(from.harbor());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Neighbor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.Neighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Neighbor::CopyFrom(const Neighbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.Neighbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neighbor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_harbor()) {
    if (!this->harbor_->IsInitialized()) return false;
  }
  return true;
}

void Neighbor::Swap(Neighbor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Neighbor::InternalSwap(Neighbor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(harbor_, other->harbor_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata Neighbor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RegisterChunkServerResponse::InitAsDefaultInstance() {
  ::ofs::c2m::_RegisterChunkServerResponse_default_instance_._instance.get_mutable()->neighbor_ = const_cast< ::ofs::c2m::Neighbor*>(
      ::ofs::c2m::Neighbor::internal_default_instance());
}
class RegisterChunkServerResponse::HasBitSetters {
 public:
  static void set_has_ok(RegisterChunkServerResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ofs::c2m::Neighbor& neighbor(const RegisterChunkServerResponse* msg);
  static void set_has_neighbor(RegisterChunkServerResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::Neighbor&
RegisterChunkServerResponse::HasBitSetters::neighbor(const RegisterChunkServerResponse* msg) {
  return *msg->neighbor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterChunkServerResponse::kOkFieldNumber;
const int RegisterChunkServerResponse::kNeighborFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterChunkServerResponse::RegisterChunkServerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.RegisterChunkServerResponse)
}
RegisterChunkServerResponse::RegisterChunkServerResponse(const RegisterChunkServerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_neighbor()) {
    neighbor_ = new ::ofs::c2m::Neighbor(*from.neighbor_);
  } else {
    neighbor_ = nullptr;
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.RegisterChunkServerResponse)
}

void RegisterChunkServerResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RegisterChunkServerResponse_Chunk_2eproto.base);
  ::memset(&neighbor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ok_) -
      reinterpret_cast<char*>(&neighbor_)) + sizeof(ok_));
}

RegisterChunkServerResponse::~RegisterChunkServerResponse() {
  // @@protoc_insertion_point(destructor:ofs.c2m.RegisterChunkServerResponse)
  SharedDtor();
}

void RegisterChunkServerResponse::SharedDtor() {
  if (this != internal_default_instance()) delete neighbor_;
}

void RegisterChunkServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterChunkServerResponse& RegisterChunkServerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RegisterChunkServerResponse_Chunk_2eproto.base);
  return *internal_default_instance();
}


void RegisterChunkServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.RegisterChunkServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(neighbor_ != nullptr);
    neighbor_->Clear();
  }
  ok_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterChunkServerResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RegisterChunkServerResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bool ok = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ok(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ofs.c2m.Neighbor neighbor = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::Neighbor::_InternalParse;
        object = msg->mutable_neighbor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterChunkServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.RegisterChunkServerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ok = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ok(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.Neighbor neighbor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.RegisterChunkServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.RegisterChunkServerResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterChunkServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.RegisterChunkServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool ok = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ok(), output);
  }

  // required .ofs.c2m.Neighbor neighbor = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::neighbor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.RegisterChunkServerResponse)
}

::google::protobuf::uint8* RegisterChunkServerResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.RegisterChunkServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool ok = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ok(), target);
  }

  // required .ofs.c2m.Neighbor neighbor = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::neighbor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.RegisterChunkServerResponse)
  return target;
}

size_t RegisterChunkServerResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.RegisterChunkServerResponse)
  size_t total_size = 0;

  if (has_neighbor()) {
    // required .ofs.c2m.Neighbor neighbor = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *neighbor_);
  }

  if (has_ok()) {
    // required bool ok = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RegisterChunkServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.RegisterChunkServerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ofs.c2m.Neighbor neighbor = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *neighbor_);

    // required bool ok = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterChunkServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.RegisterChunkServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterChunkServerResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RegisterChunkServerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.RegisterChunkServerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.RegisterChunkServerResponse)
    MergeFrom(*source);
  }
}

void RegisterChunkServerResponse::MergeFrom(const RegisterChunkServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.RegisterChunkServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_neighbor()->::ofs::c2m::Neighbor::MergeFrom(from.neighbor());
    }
    if (cached_has_bits & 0x00000002u) {
      ok_ = from.ok_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterChunkServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.RegisterChunkServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterChunkServerResponse::CopyFrom(const RegisterChunkServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.RegisterChunkServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterChunkServerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_neighbor()) {
    if (!this->neighbor_->IsInitialized()) return false;
  }
  return true;
}

void RegisterChunkServerResponse::Swap(RegisterChunkServerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterChunkServerResponse::InternalSwap(RegisterChunkServerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(neighbor_, other->neighbor_);
  swap(ok_, other->ok_);
}

::google::protobuf::Metadata RegisterChunkServerResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BlockStatus::InitAsDefaultInstance() {
}
class BlockStatus::HasBitSetters {
 public:
  static void set_has_id(BlockStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_version(BlockStatus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_size(BlockStatus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockStatus::kIdFieldNumber;
const int BlockStatus::kVersionFieldNumber;
const int BlockStatus::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockStatus::BlockStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.BlockStatus)
}
BlockStatus::BlockStatus(const BlockStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.BlockStatus)
}

void BlockStatus::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&id_)) + sizeof(size_));
}

BlockStatus::~BlockStatus() {
  // @@protoc_insertion_point(destructor:ofs.c2m.BlockStatus)
  SharedDtor();
}

void BlockStatus::SharedDtor() {
}

void BlockStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockStatus& BlockStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BlockStatus_Chunk_2eproto.base);
  return *internal_default_instance();
}


void BlockStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.BlockStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&id_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlockStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BlockStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 size = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlockStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.BlockStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.BlockStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.BlockStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlockStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.BlockStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // required int32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.BlockStatus)
}

::google::protobuf::uint8* BlockStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.BlockStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // required int32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.BlockStatus)
  return target;
}

size_t BlockStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.BlockStatus)
  size_t total_size = 0;

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_version()) {
    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_size()) {
    // required int32 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  return total_size;
}
size_t BlockStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.BlockStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int32 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.BlockStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockStatus* source =
      ::google::protobuf::DynamicCastToGenerated<BlockStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.BlockStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.BlockStatus)
    MergeFrom(*source);
  }
}

void BlockStatus::MergeFrom(const BlockStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.BlockStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlockStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.BlockStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockStatus::CopyFrom(const BlockStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.BlockStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void BlockStatus::Swap(BlockStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockStatus::InternalSwap(BlockStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(version_, other->version_);
  swap(size_, other->size_);
}

::google::protobuf::Metadata BlockStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HeartbeatRequest::InitAsDefaultInstance() {
  ::ofs::c2m::_HeartbeatRequest_default_instance_._instance.get_mutable()->node_ = const_cast< ::ofs::c2m::NodeInfo*>(
      ::ofs::c2m::NodeInfo::internal_default_instance());
}
class HeartbeatRequest::HasBitSetters {
 public:
  static void set_has_id(HeartbeatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ofs::c2m::NodeInfo& node(const HeartbeatRequest* msg);
  static void set_has_node(HeartbeatRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::NodeInfo&
HeartbeatRequest::HasBitSetters::node(const HeartbeatRequest* msg) {
  return *msg->node_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatRequest::kIdFieldNumber;
const int HeartbeatRequest::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatRequest::HeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node()) {
    node_ = new ::ofs::c2m::NodeInfo(*from.node_);
  } else {
    node_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.HeartbeatRequest)
}

void HeartbeatRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HeartbeatRequest_Chunk_2eproto.base);
  ::memset(&node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&node_)) + sizeof(id_));
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:ofs.c2m.HeartbeatRequest)
  SharedDtor();
}

void HeartbeatRequest::SharedDtor() {
  if (this != internal_default_instance()) delete node_;
}

void HeartbeatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartbeatRequest& HeartbeatRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HeartbeatRequest_Chunk_2eproto.base);
  return *internal_default_instance();
}


void HeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.HeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(node_ != nullptr);
    node_->Clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeartbeatRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HeartbeatRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ofs.c2m.NodeInfo node = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::NodeInfo::_InternalParse;
        object = msg->mutable_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.HeartbeatRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.NodeInfo node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.HeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.HeartbeatRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.HeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .ofs.c2m.NodeInfo node = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::node(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.HeartbeatRequest)
}

::google::protobuf::uint8* HeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.HeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .ofs.c2m.NodeInfo node = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::node(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.HeartbeatRequest)
  return target;
}

size_t HeartbeatRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.HeartbeatRequest)
  size_t total_size = 0;

  if (has_node()) {
    // required .ofs.c2m.NodeInfo node = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t HeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.HeartbeatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ofs.c2m.NodeInfo node = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatRequest* source =
      ::google::protobuf::DynamicCastToGenerated<HeartbeatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.HeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.HeartbeatRequest)
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_node()->::ofs::c2m::NodeInfo::MergeFrom(from.node());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_node()) {
    if (!this->node_->IsInitialized()) return false;
  }
  return true;
}

void HeartbeatRequest::Swap(HeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatRequest::InternalSwap(HeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(node_, other->node_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata HeartbeatRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void HeartbeatResponse::InitAsDefaultInstance() {
}
class HeartbeatResponse::HasBitSetters {
 public:
  static void set_has_ok(HeartbeatResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatResponse::kOkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatResponse::HeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.HeartbeatResponse)
}

void HeartbeatResponse::SharedCtor() {
  ok_ = false;
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:ofs.c2m.HeartbeatResponse)
  SharedDtor();
}

void HeartbeatResponse::SharedDtor() {
}

void HeartbeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartbeatResponse& HeartbeatResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HeartbeatResponse_Chunk_2eproto.base);
  return *internal_default_instance();
}


void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.HeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ok_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeartbeatResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HeartbeatResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required bool ok = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ok(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.HeartbeatResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ok = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ok(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.HeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.HeartbeatResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.HeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool ok = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ok(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.HeartbeatResponse)
}

::google::protobuf::uint8* HeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.HeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool ok = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ok(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.HeartbeatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool ok = 1;
  if (has_ok()) {
    total_size += 1 + 1;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatResponse* source =
      ::google::protobuf::DynamicCastToGenerated<HeartbeatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.HeartbeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.HeartbeatResponse)
    MergeFrom(*source);
  }
}

void HeartbeatResponse::MergeFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ok()) {
    set_ok(from.ok());
  }
}

void HeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HeartbeatResponse::Swap(HeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ok_, other->ok_);
}

::google::protobuf::Metadata HeartbeatResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReportRequest::InitAsDefaultInstance() {
  ::ofs::c2m::_ReportRequest_default_instance_._instance.get_mutable()->block_ = const_cast< ::ofs::c2m::BlockStatus*>(
      ::ofs::c2m::BlockStatus::internal_default_instance());
}
class ReportRequest::HasBitSetters {
 public:
  static void set_has_id(ReportRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ofs::c2m::BlockStatus& block(const ReportRequest* msg);
  static void set_has_block(ReportRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::BlockStatus&
ReportRequest::HasBitSetters::block(const ReportRequest* msg) {
  return *msg->block_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportRequest::kIdFieldNumber;
const int ReportRequest::kBlockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportRequest::ReportRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.ReportRequest)
}
ReportRequest::ReportRequest(const ReportRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block()) {
    block_ = new ::ofs::c2m::BlockStatus(*from.block_);
  } else {
    block_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.ReportRequest)
}

void ReportRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReportRequest_Chunk_2eproto.base);
  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&block_)) + sizeof(id_));
}

ReportRequest::~ReportRequest() {
  // @@protoc_insertion_point(destructor:ofs.c2m.ReportRequest)
  SharedDtor();
}

void ReportRequest::SharedDtor() {
  if (this != internal_default_instance()) delete block_;
}

void ReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportRequest& ReportRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportRequest_Chunk_2eproto.base);
  return *internal_default_instance();
}


void ReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.ReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(block_ != nullptr);
    block_->Clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required .ofs.c2m.BlockStatus block = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::BlockStatus::_InternalParse;
        object = msg->mutable_block();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.ReportRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ofs.c2m.BlockStatus block = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.ReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.ReportRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.ReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .ofs.c2m.BlockStatus block = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::block(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.ReportRequest)
}

::google::protobuf::uint8* ReportRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.ReportRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .ofs.c2m.BlockStatus block = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::block(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.ReportRequest)
  return target;
}

size_t ReportRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.ReportRequest)
  size_t total_size = 0;

  if (has_block()) {
    // required .ofs.c2m.BlockStatus block = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *block_);
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t ReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.ReportRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .ofs.c2m.BlockStatus block = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *block_);

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.ReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ReportRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.ReportRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.ReportRequest)
    MergeFrom(*source);
  }
}

void ReportRequest::MergeFrom(const ReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.ReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_block()->::ofs::c2m::BlockStatus::MergeFrom(from.block());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.ReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRequest::CopyFrom(const ReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.ReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_block()) {
    if (!this->block_->IsInitialized()) return false;
  }
  return true;
}

void ReportRequest::Swap(ReportRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportRequest::InternalSwap(ReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(block_, other->block_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata ReportRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecoverInfo::InitAsDefaultInstance() {
}
class RecoverInfo::HasBitSetters {
 public:
  static void set_has_until(RecoverInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_version(RecoverInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_newversion(RecoverInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_copyto(RecoverInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecoverInfo::kUntilFieldNumber;
const int RecoverInfo::kVersionFieldNumber;
const int RecoverInfo::kNewVersionFieldNumber;
const int RecoverInfo::kCopyToFieldNumber;
const int RecoverInfo::kChunkserversFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecoverInfo::RecoverInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.RecoverInfo)
}
RecoverInfo::RecoverInfo(const RecoverInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      chunkservers_(from.chunkservers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&until_, &from.until_,
    static_cast<size_t>(reinterpret_cast<char*>(&copyto_) -
    reinterpret_cast<char*>(&until_)) + sizeof(copyto_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.RecoverInfo)
}

void RecoverInfo::SharedCtor() {
  ::memset(&until_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&copyto_) -
      reinterpret_cast<char*>(&until_)) + sizeof(copyto_));
}

RecoverInfo::~RecoverInfo() {
  // @@protoc_insertion_point(destructor:ofs.c2m.RecoverInfo)
  SharedDtor();
}

void RecoverInfo::SharedDtor() {
}

void RecoverInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecoverInfo& RecoverInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecoverInfo_Chunk_2eproto.base);
  return *internal_default_instance();
}


void RecoverInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.RecoverInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunkservers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&until_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&copyto_) -
        reinterpret_cast<char*>(&until_)) + sizeof(copyto_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecoverInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecoverInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 until = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_until(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 newVersion = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_newversion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 copyTo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_copyto(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 chunkservers = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_chunkservers(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_chunkservers();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecoverInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.RecoverInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 until = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_until(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 newVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_newversion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 copyTo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_copyto(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copyto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 chunkservers = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_chunkservers())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chunkservers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.RecoverInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.RecoverInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecoverInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.RecoverInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 until = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->until(), output);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // required int64 newVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->newversion(), output);
  }

  // required int32 copyTo = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->copyto(), output);
  }

  // repeated int32 chunkservers = 5;
  for (int i = 0, n = this->chunkservers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->chunkservers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.RecoverInfo)
}

::google::protobuf::uint8* RecoverInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.RecoverInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 until = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->until(), target);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // required int64 newVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->newversion(), target);
  }

  // required int32 copyTo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->copyto(), target);
  }

  // repeated int32 chunkservers = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->chunkservers_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.RecoverInfo)
  return target;
}

size_t RecoverInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.RecoverInfo)
  size_t total_size = 0;

  if (has_until()) {
    // required int64 until = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->until());
  }

  if (has_version()) {
    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_newversion()) {
    // required int64 newVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newversion());
  }

  if (has_copyto()) {
    // required int32 copyTo = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->copyto());
  }

  return total_size;
}
size_t RecoverInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.RecoverInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 until = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->until());

    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int64 newVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newversion());

    // required int32 copyTo = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->copyto());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 chunkservers = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->chunkservers_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->chunkservers_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoverInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.RecoverInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoverInfo* source =
      ::google::protobuf::DynamicCastToGenerated<RecoverInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.RecoverInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.RecoverInfo)
    MergeFrom(*source);
  }
}

void RecoverInfo::MergeFrom(const RecoverInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.RecoverInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunkservers_.MergeFrom(from.chunkservers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      until_ = from.until_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      newversion_ = from.newversion_;
    }
    if (cached_has_bits & 0x00000008u) {
      copyto_ = from.copyto_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RecoverInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.RecoverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverInfo::CopyFrom(const RecoverInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.RecoverInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void RecoverInfo::Swap(RecoverInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecoverInfo::InternalSwap(RecoverInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chunkservers_.InternalSwap(&other->chunkservers_);
  swap(until_, other->until_);
  swap(version_, other->version_);
  swap(newversion_, other->newversion_);
  swap(copyto_, other->copyto_);
}

::google::protobuf::Metadata RecoverInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReportResponse::InitAsDefaultInstance() {
  ::ofs::c2m::_ReportResponse_default_instance_._instance.get_mutable()->recoverinfo_ = const_cast< ::ofs::c2m::RecoverInfo*>(
      ::ofs::c2m::RecoverInfo::internal_default_instance());
}
class ReportResponse::HasBitSetters {
 public:
  static void set_has_errcode(ReportResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ofs::c2m::RecoverInfo& recoverinfo(const ReportResponse* msg);
  static void set_has_recoverinfo(ReportResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::RecoverInfo&
ReportResponse::HasBitSetters::recoverinfo(const ReportResponse* msg) {
  return *msg->recoverinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportResponse::kErrCodeFieldNumber;
const int ReportResponse::kRecoverInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportResponse::ReportResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.ReportResponse)
}
ReportResponse::ReportResponse(const ReportResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_recoverinfo()) {
    recoverinfo_ = new ::ofs::c2m::RecoverInfo(*from.recoverinfo_);
  } else {
    recoverinfo_ = nullptr;
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.ReportResponse)
}

void ReportResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReportResponse_Chunk_2eproto.base);
  ::memset(&recoverinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&recoverinfo_)) + sizeof(errcode_));
}

ReportResponse::~ReportResponse() {
  // @@protoc_insertion_point(destructor:ofs.c2m.ReportResponse)
  SharedDtor();
}

void ReportResponse::SharedDtor() {
  if (this != internal_default_instance()) delete recoverinfo_;
}

void ReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportResponse& ReportResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReportResponse_Chunk_2eproto.base);
  return *internal_default_instance();
}


void ReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.ReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(recoverinfo_ != nullptr);
    recoverinfo_->Clear();
  }
  errcode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReportResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReportResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .ofs.c2m.ErrorCode errCode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ofs::c2m::ErrorCode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_errcode(static_cast<::ofs::c2m::ErrorCode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ofs.c2m.RecoverInfo recoverInfo = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::RecoverInfo::_InternalParse;
        object = msg->mutable_recoverinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.ReportResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ofs.c2m.ErrorCode errCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ofs::c2m::ErrorCode_IsValid(value)) {
            set_errcode(static_cast< ::ofs::c2m::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ofs.c2m.RecoverInfo recoverInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_recoverinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.ReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.ReportResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.ReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ofs.c2m.ErrorCode errCode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errcode(), output);
  }

  // optional .ofs.c2m.RecoverInfo recoverInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::recoverinfo(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.ReportResponse)
}

::google::protobuf::uint8* ReportResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.ReportResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ofs.c2m.ErrorCode errCode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errcode(), target);
  }

  // optional .ofs.c2m.RecoverInfo recoverInfo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::recoverinfo(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.ReportResponse)
  return target;
}

size_t ReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.ReportResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ofs.c2m.ErrorCode errCode = 1;
  if (has_errcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ofs.c2m.RecoverInfo recoverInfo = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *recoverinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.ReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ReportResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.ReportResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.ReportResponse)
    MergeFrom(*source);
  }
}

void ReportResponse::MergeFrom(const ReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.ReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_recoverinfo()->::ofs::c2m::RecoverInfo::MergeFrom(from.recoverinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      errcode_ = from.errcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.ReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportResponse::CopyFrom(const ReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.ReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_recoverinfo()) {
    if (!this->recoverinfo_->IsInitialized()) return false;
  }
  return true;
}

void ReportResponse::Swap(ReportResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportResponse::InternalSwap(ReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(recoverinfo_, other->recoverinfo_);
  swap(errcode_, other->errcode_);
}

::google::protobuf::Metadata ReportResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RenewLeaseRequest::InitAsDefaultInstance() {
}
class RenewLeaseRequest::HasBitSetters {
 public:
  static void set_has_id(RenewLeaseRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_blockid(RenewLeaseRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenewLeaseRequest::kIdFieldNumber;
const int RenewLeaseRequest::kBlockIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenewLeaseRequest::RenewLeaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.RenewLeaseRequest)
}
RenewLeaseRequest::RenewLeaseRequest(const RenewLeaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blockid_, &from.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&blockid_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.RenewLeaseRequest)
}

void RenewLeaseRequest::SharedCtor() {
  ::memset(&blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&blockid_)) + sizeof(id_));
}

RenewLeaseRequest::~RenewLeaseRequest() {
  // @@protoc_insertion_point(destructor:ofs.c2m.RenewLeaseRequest)
  SharedDtor();
}

void RenewLeaseRequest::SharedDtor() {
}

void RenewLeaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenewLeaseRequest& RenewLeaseRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RenewLeaseRequest_Chunk_2eproto.base);
  return *internal_default_instance();
}


void RenewLeaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.RenewLeaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&blockid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&blockid_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RenewLeaseRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RenewLeaseRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 blockId = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_blockid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RenewLeaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.RenewLeaseRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 blockId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_blockid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.RenewLeaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.RenewLeaseRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RenewLeaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.RenewLeaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int64 blockId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->blockid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.RenewLeaseRequest)
}

::google::protobuf::uint8* RenewLeaseRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.RenewLeaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int64 blockId = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->blockid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.RenewLeaseRequest)
  return target;
}

size_t RenewLeaseRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.RenewLeaseRequest)
  size_t total_size = 0;

  if (has_blockid()) {
    // required int64 blockId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());
  }

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  return total_size;
}
size_t RenewLeaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.RenewLeaseRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 blockId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());

    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenewLeaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.RenewLeaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RenewLeaseRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RenewLeaseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.RenewLeaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.RenewLeaseRequest)
    MergeFrom(*source);
  }
}

void RenewLeaseRequest::MergeFrom(const RenewLeaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.RenewLeaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      blockid_ = from.blockid_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RenewLeaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.RenewLeaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenewLeaseRequest::CopyFrom(const RenewLeaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.RenewLeaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewLeaseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RenewLeaseRequest::Swap(RenewLeaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenewLeaseRequest::InternalSwap(RenewLeaseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(blockid_, other->blockid_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata RenewLeaseRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Lease::InitAsDefaultInstance() {
}
class Lease::HasBitSetters {
 public:
  static void set_has_until(Lease* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_version(Lease* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_newversion(Lease* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lease::kUntilFieldNumber;
const int Lease::kVersionFieldNumber;
const int Lease::kNewVersionFieldNumber;
const int Lease::kChunkserversFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lease::Lease()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.Lease)
}
Lease::Lease(const Lease& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      chunkservers_(from.chunkservers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&until_, &from.until_,
    static_cast<size_t>(reinterpret_cast<char*>(&newversion_) -
    reinterpret_cast<char*>(&until_)) + sizeof(newversion_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.Lease)
}

void Lease::SharedCtor() {
  ::memset(&until_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newversion_) -
      reinterpret_cast<char*>(&until_)) + sizeof(newversion_));
}

Lease::~Lease() {
  // @@protoc_insertion_point(destructor:ofs.c2m.Lease)
  SharedDtor();
}

void Lease::SharedDtor() {
}

void Lease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lease& Lease::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Lease_Chunk_2eproto.base);
  return *internal_default_instance();
}


void Lease::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.Lease)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunkservers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&until_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newversion_) -
        reinterpret_cast<char*>(&until_)) + sizeof(newversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Lease::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Lease*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 until = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_until(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 newVersion = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_newversion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 chunkservers = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_chunkservers(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_chunkservers();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Lease::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.Lease)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 until = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_until(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 newVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_newversion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 chunkservers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_chunkservers())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chunkservers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.Lease)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.Lease)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Lease::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.Lease)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 until = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->until(), output);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // required int64 newVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->newversion(), output);
  }

  // repeated int32 chunkservers = 4;
  for (int i = 0, n = this->chunkservers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->chunkservers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.Lease)
}

::google::protobuf::uint8* Lease::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.Lease)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 until = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->until(), target);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // required int64 newVersion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->newversion(), target);
  }

  // repeated int32 chunkservers = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->chunkservers_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.Lease)
  return target;
}

size_t Lease::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.Lease)
  size_t total_size = 0;

  if (has_until()) {
    // required int64 until = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->until());
  }

  if (has_version()) {
    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_newversion()) {
    // required int64 newVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newversion());
  }

  return total_size;
}
size_t Lease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.Lease)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 until = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->until());

    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int64 newVersion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 chunkservers = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->chunkservers_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->chunkservers_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lease::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.Lease)
  GOOGLE_DCHECK_NE(&from, this);
  const Lease* source =
      ::google::protobuf::DynamicCastToGenerated<Lease>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.Lease)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.Lease)
    MergeFrom(*source);
  }
}

void Lease::MergeFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.Lease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunkservers_.MergeFrom(from.chunkservers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      until_ = from.until_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      newversion_ = from.newversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lease::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.Lease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lease::CopyFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.Lease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lease::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Lease::Swap(Lease* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lease::InternalSwap(Lease* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  chunkservers_.InternalSwap(&other->chunkservers_);
  swap(until_, other->until_);
  swap(version_, other->version_);
  swap(newversion_, other->newversion_);
}

::google::protobuf::Metadata Lease::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RenewLeaseResponse::InitAsDefaultInstance() {
  ::ofs::c2m::_RenewLeaseResponse_default_instance_._instance.get_mutable()->lease_ = const_cast< ::ofs::c2m::Lease*>(
      ::ofs::c2m::Lease::internal_default_instance());
}
class RenewLeaseResponse::HasBitSetters {
 public:
  static void set_has_errcode(RenewLeaseResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::ofs::c2m::Lease& lease(const RenewLeaseResponse* msg);
  static void set_has_lease(RenewLeaseResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::Lease&
RenewLeaseResponse::HasBitSetters::lease(const RenewLeaseResponse* msg) {
  return *msg->lease_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenewLeaseResponse::kErrCodeFieldNumber;
const int RenewLeaseResponse::kLeaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenewLeaseResponse::RenewLeaseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.RenewLeaseResponse)
}
RenewLeaseResponse::RenewLeaseResponse(const RenewLeaseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lease()) {
    lease_ = new ::ofs::c2m::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.RenewLeaseResponse)
}

void RenewLeaseResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RenewLeaseResponse_Chunk_2eproto.base);
  ::memset(&lease_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&lease_)) + sizeof(errcode_));
}

RenewLeaseResponse::~RenewLeaseResponse() {
  // @@protoc_insertion_point(destructor:ofs.c2m.RenewLeaseResponse)
  SharedDtor();
}

void RenewLeaseResponse::SharedDtor() {
  if (this != internal_default_instance()) delete lease_;
}

void RenewLeaseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RenewLeaseResponse& RenewLeaseResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RenewLeaseResponse_Chunk_2eproto.base);
  return *internal_default_instance();
}


void RenewLeaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.RenewLeaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(lease_ != nullptr);
    lease_->Clear();
  }
  errcode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RenewLeaseResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RenewLeaseResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .ofs.c2m.ErrorCode errCode = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::ofs::c2m::ErrorCode_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_errcode(static_cast<::ofs::c2m::ErrorCode>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .ofs.c2m.Lease lease = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::Lease::_InternalParse;
        object = msg->mutable_lease();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RenewLeaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.RenewLeaseResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ofs.c2m.ErrorCode errCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ofs::c2m::ErrorCode_IsValid(value)) {
            set_errcode(static_cast< ::ofs::c2m::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ofs.c2m.Lease lease = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lease()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.RenewLeaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.RenewLeaseResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RenewLeaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.RenewLeaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ofs.c2m.ErrorCode errCode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errcode(), output);
  }

  // optional .ofs.c2m.Lease lease = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::lease(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.RenewLeaseResponse)
}

::google::protobuf::uint8* RenewLeaseResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.RenewLeaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ofs.c2m.ErrorCode errCode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errcode(), target);
  }

  // optional .ofs.c2m.Lease lease = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::lease(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.RenewLeaseResponse)
  return target;
}

size_t RenewLeaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.RenewLeaseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ofs.c2m.ErrorCode errCode = 1;
  if (has_errcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->errcode());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ofs.c2m.Lease lease = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenewLeaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.RenewLeaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RenewLeaseResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RenewLeaseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.RenewLeaseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.RenewLeaseResponse)
    MergeFrom(*source);
  }
}

void RenewLeaseResponse::MergeFrom(const RenewLeaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.RenewLeaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lease()->::ofs::c2m::Lease::MergeFrom(from.lease());
    }
    if (cached_has_bits & 0x00000002u) {
      errcode_ = from.errcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RenewLeaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.RenewLeaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenewLeaseResponse::CopyFrom(const RenewLeaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.RenewLeaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewLeaseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_lease()) {
    if (!this->lease_->IsInitialized()) return false;
  }
  return true;
}

void RenewLeaseResponse::Swap(RenewLeaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenewLeaseResponse::InternalSwap(RenewLeaseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lease_, other->lease_);
  swap(errcode_, other->errcode_);
}

::google::protobuf::Metadata RenewLeaseResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NeighborGossip::InitAsDefaultInstance() {
  ::ofs::c2m::_NeighborGossip_default_instance_._instance.get_mutable()->neighbor_ = const_cast< ::ofs::c2m::Neighbor*>(
      ::ofs::c2m::Neighbor::internal_default_instance());
}
class NeighborGossip::HasBitSetters {
 public:
  static const ::ofs::c2m::Neighbor& neighbor(const NeighborGossip* msg);
  static void set_has_neighbor(NeighborGossip* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::ofs::c2m::Neighbor&
NeighborGossip::HasBitSetters::neighbor(const NeighborGossip* msg) {
  return *msg->neighbor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeighborGossip::kNeighborFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeighborGossip::NeighborGossip()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.NeighborGossip)
}
NeighborGossip::NeighborGossip(const NeighborGossip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_neighbor()) {
    neighbor_ = new ::ofs::c2m::Neighbor(*from.neighbor_);
  } else {
    neighbor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.NeighborGossip)
}

void NeighborGossip::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NeighborGossip_Chunk_2eproto.base);
  neighbor_ = nullptr;
}

NeighborGossip::~NeighborGossip() {
  // @@protoc_insertion_point(destructor:ofs.c2m.NeighborGossip)
  SharedDtor();
}

void NeighborGossip::SharedDtor() {
  if (this != internal_default_instance()) delete neighbor_;
}

void NeighborGossip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NeighborGossip& NeighborGossip::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NeighborGossip_Chunk_2eproto.base);
  return *internal_default_instance();
}


void NeighborGossip::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.NeighborGossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(neighbor_ != nullptr);
    neighbor_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NeighborGossip::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NeighborGossip*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .ofs.c2m.Neighbor neighbor = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ofs::c2m::Neighbor::_InternalParse;
        object = msg->mutable_neighbor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NeighborGossip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.NeighborGossip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ofs.c2m.Neighbor neighbor = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neighbor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.NeighborGossip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.NeighborGossip)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NeighborGossip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.NeighborGossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ofs.c2m.Neighbor neighbor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::neighbor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.NeighborGossip)
}

::google::protobuf::uint8* NeighborGossip::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.NeighborGossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ofs.c2m.Neighbor neighbor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::neighbor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.NeighborGossip)
  return target;
}

size_t NeighborGossip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.NeighborGossip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ofs.c2m.Neighbor neighbor = 1;
  if (has_neighbor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *neighbor_);
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NeighborGossip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.NeighborGossip)
  GOOGLE_DCHECK_NE(&from, this);
  const NeighborGossip* source =
      ::google::protobuf::DynamicCastToGenerated<NeighborGossip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.NeighborGossip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.NeighborGossip)
    MergeFrom(*source);
  }
}

void NeighborGossip::MergeFrom(const NeighborGossip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.NeighborGossip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_neighbor()) {
    mutable_neighbor()->::ofs::c2m::Neighbor::MergeFrom(from.neighbor());
  }
}

void NeighborGossip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.NeighborGossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeighborGossip::CopyFrom(const NeighborGossip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.NeighborGossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighborGossip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_neighbor()) {
    if (!this->neighbor_->IsInitialized()) return false;
  }
  return true;
}

void NeighborGossip::Swap(NeighborGossip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeighborGossip::InternalSwap(NeighborGossip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(neighbor_, other->neighbor_);
}

::google::protobuf::Metadata NeighborGossip::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WriteNotify::InitAsDefaultInstance() {
}
class WriteNotify::HasBitSetters {
 public:
  static void set_has_blockid(WriteNotify* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_version(WriteNotify* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_newversion(WriteNotify* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_offset(WriteNotify* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_data(WriteNotify* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteNotify::kBlockidFieldNumber;
const int WriteNotify::kVersionFieldNumber;
const int WriteNotify::kNewversionFieldNumber;
const int WriteNotify::kOffsetFieldNumber;
const int WriteNotify::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteNotify::WriteNotify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.WriteNotify)
}
WriteNotify::WriteNotify(const WriteNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&blockid_, &from.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&blockid_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.WriteNotify)
}

void WriteNotify::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WriteNotify_Chunk_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&blockid_)) + sizeof(offset_));
}

WriteNotify::~WriteNotify() {
  // @@protoc_insertion_point(destructor:ofs.c2m.WriteNotify)
  SharedDtor();
}

void WriteNotify::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteNotify& WriteNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WriteNotify_Chunk_2eproto.base);
  return *internal_default_instance();
}


void WriteNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.WriteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&blockid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&blockid_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WriteNotify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WriteNotify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_blockid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 newversion = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_newversion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int32 offset = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_offset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ofs.c2m.WriteNotify.data");
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WriteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.WriteNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_blockid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 newversion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_newversion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_offset(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ofs.c2m.WriteNotify.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.WriteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.WriteNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WriteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.WriteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->blockid(), output);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // required int64 newversion = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->newversion(), output);
  }

  // required int32 offset = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }

  // required string data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.WriteNotify.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.WriteNotify)
}

::google::protobuf::uint8* WriteNotify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.WriteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->blockid(), target);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // required int64 newversion = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->newversion(), target);
  }

  // required int32 offset = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }

  // required string data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.WriteNotify.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.WriteNotify)
  return target;
}

size_t WriteNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.WriteNotify)
  size_t total_size = 0;

  if (has_data()) {
    // required string data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  if (has_blockid()) {
    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());
  }

  if (has_version()) {
    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_newversion()) {
    // required int64 newversion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newversion());
  }

  if (has_offset()) {
    // required int32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset());
  }

  return total_size;
}
size_t WriteNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.WriteNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());

    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());

    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int64 newversion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newversion());

    // required int32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.WriteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteNotify* source =
      ::google::protobuf::DynamicCastToGenerated<WriteNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.WriteNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.WriteNotify)
    MergeFrom(*source);
  }
}

void WriteNotify::MergeFrom(const WriteNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.WriteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      blockid_ = from.blockid_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      newversion_ = from.newversion_;
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WriteNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.WriteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteNotify::CopyFrom(const WriteNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.WriteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void WriteNotify::Swap(WriteNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteNotify::InternalSwap(WriteNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(blockid_, other->blockid_);
  swap(version_, other->version_);
  swap(newversion_, other->newversion_);
  swap(offset_, other->offset_);
}

::google::protobuf::Metadata WriteNotify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AppendNotify::InitAsDefaultInstance() {
}
class AppendNotify::HasBitSetters {
 public:
  static void set_has_blockid(AppendNotify* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_version(AppendNotify* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_newversion(AppendNotify* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_data(AppendNotify* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendNotify::kBlockidFieldNumber;
const int AppendNotify::kVersionFieldNumber;
const int AppendNotify::kNewversionFieldNumber;
const int AppendNotify::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendNotify::AppendNotify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ofs.c2m.AppendNotify)
}
AppendNotify::AppendNotify(const AppendNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&blockid_, &from.blockid_,
    static_cast<size_t>(reinterpret_cast<char*>(&newversion_) -
    reinterpret_cast<char*>(&blockid_)) + sizeof(newversion_));
  // @@protoc_insertion_point(copy_constructor:ofs.c2m.AppendNotify)
}

void AppendNotify::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AppendNotify_Chunk_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&blockid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&newversion_) -
      reinterpret_cast<char*>(&blockid_)) + sizeof(newversion_));
}

AppendNotify::~AppendNotify() {
  // @@protoc_insertion_point(destructor:ofs.c2m.AppendNotify)
  SharedDtor();
}

void AppendNotify::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AppendNotify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppendNotify& AppendNotify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AppendNotify_Chunk_2eproto.base);
  return *internal_default_instance();
}


void AppendNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:ofs.c2m.AppendNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&blockid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&newversion_) -
        reinterpret_cast<char*>(&blockid_)) + sizeof(newversion_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppendNotify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AppendNotify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_blockid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 newversion = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_newversion(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required string data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("ofs.c2m.AppendNotify.data");
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ofs.c2m.AppendNotify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 blockid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_blockid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blockid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 newversion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_newversion(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ofs.c2m.AppendNotify.data");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ofs.c2m.AppendNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ofs.c2m.AppendNotify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ofs.c2m.AppendNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->blockid(), output);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->version(), output);
  }

  // required int64 newversion = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->newversion(), output);
  }

  // required string data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.AppendNotify.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ofs.c2m.AppendNotify)
}

::google::protobuf::uint8* AppendNotify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ofs.c2m.AppendNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 blockid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->blockid(), target);
  }

  // required int64 version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->version(), target);
  }

  // required int64 newversion = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->newversion(), target);
  }

  // required string data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ofs.c2m.AppendNotify.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ofs.c2m.AppendNotify)
  return target;
}

size_t AppendNotify::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ofs.c2m.AppendNotify)
  size_t total_size = 0;

  if (has_data()) {
    // required string data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  if (has_blockid()) {
    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());
  }

  if (has_version()) {
    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }

  if (has_newversion()) {
    // required int64 newversion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newversion());
  }

  return total_size;
}
size_t AppendNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ofs.c2m.AppendNotify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());

    // required int64 blockid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->blockid());

    // required int64 version = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());

    // required int64 newversion = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->newversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ofs.c2m.AppendNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendNotify* source =
      ::google::protobuf::DynamicCastToGenerated<AppendNotify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ofs.c2m.AppendNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ofs.c2m.AppendNotify)
    MergeFrom(*source);
  }
}

void AppendNotify::MergeFrom(const AppendNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ofs.c2m.AppendNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      blockid_ = from.blockid_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      newversion_ = from.newversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppendNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ofs.c2m.AppendNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendNotify::CopyFrom(const AppendNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ofs.c2m.AppendNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void AppendNotify::Swap(AppendNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendNotify::InternalSwap(AppendNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(blockid_, other->blockid_);
  swap(version_, other->version_);
  swap(newversion_, other->newversion_);
}

::google::protobuf::Metadata AppendNotify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_Chunk_2eproto);
  return ::file_level_metadata_Chunk_2eproto[kIndexInFileMessages];
}


// ===================================================================

OfsChunkService::~OfsChunkService() {}

const ::google::protobuf::ServiceDescriptor* OfsChunkService::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_Chunk_2eproto);
  return file_level_service_descriptors_Chunk_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* OfsChunkService::GetDescriptor() {
  return descriptor();
}

void OfsChunkService::RegisterChunkServer(::google::protobuf::RpcController* controller,
                         const ::ofs::c2m::RegisterChunkServerRequest*,
                         ::ofs::c2m::RegisterChunkServerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RegisterChunkServer() not implemented.");
  done->Run();
}

void OfsChunkService::Heartbeat(::google::protobuf::RpcController* controller,
                         const ::ofs::c2m::HeartbeatRequest*,
                         ::ofs::c2m::HeartbeatResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Heartbeat() not implemented.");
  done->Run();
}

void OfsChunkService::Report(::google::protobuf::RpcController* controller,
                         const ::ofs::c2m::ReportRequest*,
                         ::ofs::c2m::ReportResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Report() not implemented.");
  done->Run();
}

void OfsChunkService::RenewLease(::google::protobuf::RpcController* controller,
                         const ::ofs::c2m::RenewLeaseRequest*,
                         ::ofs::c2m::RenewLeaseResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RenewLease() not implemented.");
  done->Run();
}

void OfsChunkService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_Chunk_2eproto[0]);
  switch(method->index()) {
    case 0:
      RegisterChunkServer(controller,
             ::google::protobuf::down_cast<const ::ofs::c2m::RegisterChunkServerRequest*>(request),
             ::google::protobuf::down_cast< ::ofs::c2m::RegisterChunkServerResponse*>(response),
             done);
      break;
    case 1:
      Heartbeat(controller,
             ::google::protobuf::down_cast<const ::ofs::c2m::HeartbeatRequest*>(request),
             ::google::protobuf::down_cast< ::ofs::c2m::HeartbeatResponse*>(response),
             done);
      break;
    case 2:
      Report(controller,
             ::google::protobuf::down_cast<const ::ofs::c2m::ReportRequest*>(request),
             ::google::protobuf::down_cast< ::ofs::c2m::ReportResponse*>(response),
             done);
      break;
    case 3:
      RenewLease(controller,
             ::google::protobuf::down_cast<const ::ofs::c2m::RenewLeaseRequest*>(request),
             ::google::protobuf::down_cast< ::ofs::c2m::RenewLeaseResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& OfsChunkService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ofs::c2m::RegisterChunkServerRequest::default_instance();
    case 1:
      return ::ofs::c2m::HeartbeatRequest::default_instance();
    case 2:
      return ::ofs::c2m::ReportRequest::default_instance();
    case 3:
      return ::ofs::c2m::RenewLeaseRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& OfsChunkService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::ofs::c2m::RegisterChunkServerResponse::default_instance();
    case 1:
      return ::ofs::c2m::HeartbeatResponse::default_instance();
    case 2:
      return ::ofs::c2m::ReportResponse::default_instance();
    case 3:
      return ::ofs::c2m::RenewLeaseResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

OfsChunkService_Stub::OfsChunkService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
OfsChunkService_Stub::OfsChunkService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
OfsChunkService_Stub::~OfsChunkService_Stub() {
  if (owns_channel_) delete channel_;
}

void OfsChunkService_Stub::RegisterChunkServer(::google::protobuf::RpcController* controller,
                              const ::ofs::c2m::RegisterChunkServerRequest* request,
                              ::ofs::c2m::RegisterChunkServerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void OfsChunkService_Stub::Heartbeat(::google::protobuf::RpcController* controller,
                              const ::ofs::c2m::HeartbeatRequest* request,
                              ::ofs::c2m::HeartbeatResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void OfsChunkService_Stub::Report(::google::protobuf::RpcController* controller,
                              const ::ofs::c2m::ReportRequest* request,
                              ::ofs::c2m::ReportResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void OfsChunkService_Stub::RenewLease(::google::protobuf::RpcController* controller,
                              const ::ofs::c2m::RenewLeaseRequest* request,
                              ::ofs::c2m::RenewLeaseResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace c2m
}  // namespace ofs
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ofs::c2m::IpAddress* Arena::CreateMaybeMessage< ::ofs::c2m::IpAddress >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::IpAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::NodeInfo* Arena::CreateMaybeMessage< ::ofs::c2m::NodeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::RegisterChunkServerRequest* Arena::CreateMaybeMessage< ::ofs::c2m::RegisterChunkServerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::RegisterChunkServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::Neighbor* Arena::CreateMaybeMessage< ::ofs::c2m::Neighbor >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::Neighbor >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::RegisterChunkServerResponse* Arena::CreateMaybeMessage< ::ofs::c2m::RegisterChunkServerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::RegisterChunkServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::BlockStatus* Arena::CreateMaybeMessage< ::ofs::c2m::BlockStatus >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::BlockStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::HeartbeatRequest* Arena::CreateMaybeMessage< ::ofs::c2m::HeartbeatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::HeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::HeartbeatResponse* Arena::CreateMaybeMessage< ::ofs::c2m::HeartbeatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::HeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::ReportRequest* Arena::CreateMaybeMessage< ::ofs::c2m::ReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::ReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::RecoverInfo* Arena::CreateMaybeMessage< ::ofs::c2m::RecoverInfo >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::RecoverInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::ReportResponse* Arena::CreateMaybeMessage< ::ofs::c2m::ReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::ReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::RenewLeaseRequest* Arena::CreateMaybeMessage< ::ofs::c2m::RenewLeaseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::RenewLeaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::Lease* Arena::CreateMaybeMessage< ::ofs::c2m::Lease >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::Lease >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::RenewLeaseResponse* Arena::CreateMaybeMessage< ::ofs::c2m::RenewLeaseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::RenewLeaseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::NeighborGossip* Arena::CreateMaybeMessage< ::ofs::c2m::NeighborGossip >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::NeighborGossip >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::WriteNotify* Arena::CreateMaybeMessage< ::ofs::c2m::WriteNotify >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::WriteNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::ofs::c2m::AppendNotify* Arena::CreateMaybeMessage< ::ofs::c2m::AppendNotify >(Arena* arena) {
  return Arena::CreateInternal< ::ofs::c2m::AppendNotify >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
